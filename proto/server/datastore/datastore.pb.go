// Code generated by protoc-gen-go. DO NOT EDIT.
// source: datastore.proto

package datastore

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import common "github.com/spiffe/spire/proto/common"
import plugin "github.com/spiffe/spire/proto/common/plugin"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// ConfigureRequest from public import github.com/spiffe/spire/proto/common/plugin/plugin.proto
type ConfigureRequest = plugin.ConfigureRequest

// ConfigureResponse from public import github.com/spiffe/spire/proto/common/plugin/plugin.proto
type ConfigureResponse = plugin.ConfigureResponse

// GetPluginInfoRequest from public import github.com/spiffe/spire/proto/common/plugin/plugin.proto
type GetPluginInfoRequest = plugin.GetPluginInfoRequest

// GetPluginInfoResponse from public import github.com/spiffe/spire/proto/common/plugin/plugin.proto
type GetPluginInfoResponse = plugin.GetPluginInfoResponse

// Empty from public import github.com/spiffe/spire/proto/common/common.proto
type Empty = common.Empty

// AttestationData from public import github.com/spiffe/spire/proto/common/common.proto
type AttestationData = common.AttestationData

// Selector from public import github.com/spiffe/spire/proto/common/common.proto
type Selector = common.Selector

// Selectors from public import github.com/spiffe/spire/proto/common/common.proto
type Selectors = common.Selectors

// RegistrationEntry from public import github.com/spiffe/spire/proto/common/common.proto
type RegistrationEntry = common.RegistrationEntry

// RegistrationEntries from public import github.com/spiffe/spire/proto/common/common.proto
type RegistrationEntries = common.RegistrationEntries

// Represents the trust bundle of a foreign trust domain
type Bundle struct {
	// SPIFFE ID of the foreign trust domain
	TrustDomain string `protobuf:"bytes,1,opt,name=trust_domain,json=trustDomain" json:"trust_domain,omitempty"`
	// CA Certificates
	// ASN.1 DER encoded
	CaCerts              []byte   `protobuf:"bytes,2,opt,name=ca_certs,json=caCerts,proto3" json:"ca_certs,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Bundle) Reset()         { *m = Bundle{} }
func (m *Bundle) String() string { return proto.CompactTextString(m) }
func (*Bundle) ProtoMessage()    {}
func (*Bundle) Descriptor() ([]byte, []int) {
	return fileDescriptor_datastore_396395c57dd52724, []int{0}
}
func (m *Bundle) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Bundle.Unmarshal(m, b)
}
func (m *Bundle) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Bundle.Marshal(b, m, deterministic)
}
func (dst *Bundle) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Bundle.Merge(dst, src)
}
func (m *Bundle) XXX_Size() int {
	return xxx_messageInfo_Bundle.Size(m)
}
func (m *Bundle) XXX_DiscardUnknown() {
	xxx_messageInfo_Bundle.DiscardUnknown(m)
}

var xxx_messageInfo_Bundle proto.InternalMessageInfo

func (m *Bundle) GetTrustDomain() string {
	if m != nil {
		return m.TrustDomain
	}
	return ""
}

func (m *Bundle) GetCaCerts() []byte {
	if m != nil {
		return m.CaCerts
	}
	return nil
}

type Bundles struct {
	Bundles              []*Bundle `protobuf:"bytes,1,rep,name=bundles" json:"bundles,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *Bundles) Reset()         { *m = Bundles{} }
func (m *Bundles) String() string { return proto.CompactTextString(m) }
func (*Bundles) ProtoMessage()    {}
func (*Bundles) Descriptor() ([]byte, []int) {
	return fileDescriptor_datastore_396395c57dd52724, []int{1}
}
func (m *Bundles) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Bundles.Unmarshal(m, b)
}
func (m *Bundles) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Bundles.Marshal(b, m, deterministic)
}
func (dst *Bundles) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Bundles.Merge(dst, src)
}
func (m *Bundles) XXX_Size() int {
	return xxx_messageInfo_Bundles.Size(m)
}
func (m *Bundles) XXX_DiscardUnknown() {
	xxx_messageInfo_Bundles.DiscardUnknown(m)
}

var xxx_messageInfo_Bundles proto.InternalMessageInfo

func (m *Bundles) GetBundles() []*Bundle {
	if m != nil {
		return m.Bundles
	}
	return nil
}

// Represents a single entry in NodeResolverMap and maps node properties
// to logical attributes (i.e. an AWS instance to its ASG).
type NodeResolverMapEntry struct {
	BaseSpiffeId         string           `protobuf:"bytes,1,opt,name=baseSpiffeId" json:"baseSpiffeId,omitempty"`
	Selector             *common.Selector `protobuf:"bytes,2,opt,name=selector" json:"selector,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *NodeResolverMapEntry) Reset()         { *m = NodeResolverMapEntry{} }
func (m *NodeResolverMapEntry) String() string { return proto.CompactTextString(m) }
func (*NodeResolverMapEntry) ProtoMessage()    {}
func (*NodeResolverMapEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_datastore_396395c57dd52724, []int{2}
}
func (m *NodeResolverMapEntry) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NodeResolverMapEntry.Unmarshal(m, b)
}
func (m *NodeResolverMapEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NodeResolverMapEntry.Marshal(b, m, deterministic)
}
func (dst *NodeResolverMapEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeResolverMapEntry.Merge(dst, src)
}
func (m *NodeResolverMapEntry) XXX_Size() int {
	return xxx_messageInfo_NodeResolverMapEntry.Size(m)
}
func (m *NodeResolverMapEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeResolverMapEntry.DiscardUnknown(m)
}

var xxx_messageInfo_NodeResolverMapEntry proto.InternalMessageInfo

func (m *NodeResolverMapEntry) GetBaseSpiffeId() string {
	if m != nil {
		return m.BaseSpiffeId
	}
	return ""
}

func (m *NodeResolverMapEntry) GetSelector() *common.Selector {
	if m != nil {
		return m.Selector
	}
	return nil
}

// Represents a single entry in AttestedNodes and stores the node's
// SPIFFE ID, the type of attestation it performed, as well as the serial
// number and expiration date of its node SVID.
type AttestedNodeEntry struct {
	// Spiffe ID
	BaseSpiffeId string `protobuf:"bytes,1,opt,name=baseSpiffeId" json:"baseSpiffeId,omitempty"`
	// Attestation type
	AttestationDataType string `protobuf:"bytes,2,opt,name=attestationDataType" json:"attestationDataType,omitempty"`
	// Serial number
	CertSerialNumber string `protobuf:"bytes,3,opt,name=certSerialNumber" json:"certSerialNumber,omitempty"`
	// Expiration date
	CertExpirationDate   string   `protobuf:"bytes,4,opt,name=certExpirationDate" json:"certExpirationDate,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AttestedNodeEntry) Reset()         { *m = AttestedNodeEntry{} }
func (m *AttestedNodeEntry) String() string { return proto.CompactTextString(m) }
func (*AttestedNodeEntry) ProtoMessage()    {}
func (*AttestedNodeEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_datastore_396395c57dd52724, []int{3}
}
func (m *AttestedNodeEntry) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AttestedNodeEntry.Unmarshal(m, b)
}
func (m *AttestedNodeEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AttestedNodeEntry.Marshal(b, m, deterministic)
}
func (dst *AttestedNodeEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AttestedNodeEntry.Merge(dst, src)
}
func (m *AttestedNodeEntry) XXX_Size() int {
	return xxx_messageInfo_AttestedNodeEntry.Size(m)
}
func (m *AttestedNodeEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_AttestedNodeEntry.DiscardUnknown(m)
}

var xxx_messageInfo_AttestedNodeEntry proto.InternalMessageInfo

func (m *AttestedNodeEntry) GetBaseSpiffeId() string {
	if m != nil {
		return m.BaseSpiffeId
	}
	return ""
}

func (m *AttestedNodeEntry) GetAttestationDataType() string {
	if m != nil {
		return m.AttestationDataType
	}
	return ""
}

func (m *AttestedNodeEntry) GetCertSerialNumber() string {
	if m != nil {
		return m.CertSerialNumber
	}
	return ""
}

func (m *AttestedNodeEntry) GetCertExpirationDate() string {
	if m != nil {
		return m.CertExpirationDate
	}
	return ""
}

// Represents an Attested Node entry to create
type CreateAttestedNodeEntryRequest struct {
	// Attested node entry
	AttestedNodeEntry    *AttestedNodeEntry `protobuf:"bytes,1,opt,name=attestedNodeEntry" json:"attestedNodeEntry,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *CreateAttestedNodeEntryRequest) Reset()         { *m = CreateAttestedNodeEntryRequest{} }
func (m *CreateAttestedNodeEntryRequest) String() string { return proto.CompactTextString(m) }
func (*CreateAttestedNodeEntryRequest) ProtoMessage()    {}
func (*CreateAttestedNodeEntryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_datastore_396395c57dd52724, []int{4}
}
func (m *CreateAttestedNodeEntryRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateAttestedNodeEntryRequest.Unmarshal(m, b)
}
func (m *CreateAttestedNodeEntryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateAttestedNodeEntryRequest.Marshal(b, m, deterministic)
}
func (dst *CreateAttestedNodeEntryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateAttestedNodeEntryRequest.Merge(dst, src)
}
func (m *CreateAttestedNodeEntryRequest) XXX_Size() int {
	return xxx_messageInfo_CreateAttestedNodeEntryRequest.Size(m)
}
func (m *CreateAttestedNodeEntryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateAttestedNodeEntryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateAttestedNodeEntryRequest proto.InternalMessageInfo

func (m *CreateAttestedNodeEntryRequest) GetAttestedNodeEntry() *AttestedNodeEntry {
	if m != nil {
		return m.AttestedNodeEntry
	}
	return nil
}

// Represents the created Attested Node entry
type CreateAttestedNodeEntryResponse struct {
	// Attested node entry
	AttestedNodeEntry    *AttestedNodeEntry `protobuf:"bytes,1,opt,name=attestedNodeEntry" json:"attestedNodeEntry,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *CreateAttestedNodeEntryResponse) Reset()         { *m = CreateAttestedNodeEntryResponse{} }
func (m *CreateAttestedNodeEntryResponse) String() string { return proto.CompactTextString(m) }
func (*CreateAttestedNodeEntryResponse) ProtoMessage()    {}
func (*CreateAttestedNodeEntryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_datastore_396395c57dd52724, []int{5}
}
func (m *CreateAttestedNodeEntryResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateAttestedNodeEntryResponse.Unmarshal(m, b)
}
func (m *CreateAttestedNodeEntryResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateAttestedNodeEntryResponse.Marshal(b, m, deterministic)
}
func (dst *CreateAttestedNodeEntryResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateAttestedNodeEntryResponse.Merge(dst, src)
}
func (m *CreateAttestedNodeEntryResponse) XXX_Size() int {
	return xxx_messageInfo_CreateAttestedNodeEntryResponse.Size(m)
}
func (m *CreateAttestedNodeEntryResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateAttestedNodeEntryResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CreateAttestedNodeEntryResponse proto.InternalMessageInfo

func (m *CreateAttestedNodeEntryResponse) GetAttestedNodeEntry() *AttestedNodeEntry {
	if m != nil {
		return m.AttestedNodeEntry
	}
	return nil
}

// Represents the Spiffe ID of the node entry to retrieve
type FetchAttestedNodeEntryRequest struct {
	// SPIFFE ID
	BaseSpiffeId         string   `protobuf:"bytes,1,opt,name=baseSpiffeId" json:"baseSpiffeId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FetchAttestedNodeEntryRequest) Reset()         { *m = FetchAttestedNodeEntryRequest{} }
func (m *FetchAttestedNodeEntryRequest) String() string { return proto.CompactTextString(m) }
func (*FetchAttestedNodeEntryRequest) ProtoMessage()    {}
func (*FetchAttestedNodeEntryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_datastore_396395c57dd52724, []int{6}
}
func (m *FetchAttestedNodeEntryRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FetchAttestedNodeEntryRequest.Unmarshal(m, b)
}
func (m *FetchAttestedNodeEntryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FetchAttestedNodeEntryRequest.Marshal(b, m, deterministic)
}
func (dst *FetchAttestedNodeEntryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FetchAttestedNodeEntryRequest.Merge(dst, src)
}
func (m *FetchAttestedNodeEntryRequest) XXX_Size() int {
	return xxx_messageInfo_FetchAttestedNodeEntryRequest.Size(m)
}
func (m *FetchAttestedNodeEntryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_FetchAttestedNodeEntryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_FetchAttestedNodeEntryRequest proto.InternalMessageInfo

func (m *FetchAttestedNodeEntryRequest) GetBaseSpiffeId() string {
	if m != nil {
		return m.BaseSpiffeId
	}
	return ""
}

// Represents an Attested Node entry
type FetchAttestedNodeEntryResponse struct {
	// Attested node entry
	AttestedNodeEntry    *AttestedNodeEntry `protobuf:"bytes,1,opt,name=attestedNodeEntry" json:"attestedNodeEntry,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *FetchAttestedNodeEntryResponse) Reset()         { *m = FetchAttestedNodeEntryResponse{} }
func (m *FetchAttestedNodeEntryResponse) String() string { return proto.CompactTextString(m) }
func (*FetchAttestedNodeEntryResponse) ProtoMessage()    {}
func (*FetchAttestedNodeEntryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_datastore_396395c57dd52724, []int{7}
}
func (m *FetchAttestedNodeEntryResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FetchAttestedNodeEntryResponse.Unmarshal(m, b)
}
func (m *FetchAttestedNodeEntryResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FetchAttestedNodeEntryResponse.Marshal(b, m, deterministic)
}
func (dst *FetchAttestedNodeEntryResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FetchAttestedNodeEntryResponse.Merge(dst, src)
}
func (m *FetchAttestedNodeEntryResponse) XXX_Size() int {
	return xxx_messageInfo_FetchAttestedNodeEntryResponse.Size(m)
}
func (m *FetchAttestedNodeEntryResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_FetchAttestedNodeEntryResponse.DiscardUnknown(m)
}

var xxx_messageInfo_FetchAttestedNodeEntryResponse proto.InternalMessageInfo

func (m *FetchAttestedNodeEntryResponse) GetAttestedNodeEntry() *AttestedNodeEntry {
	if m != nil {
		return m.AttestedNodeEntry
	}
	return nil
}

// Empty Request
type FetchStaleNodeEntriesRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FetchStaleNodeEntriesRequest) Reset()         { *m = FetchStaleNodeEntriesRequest{} }
func (m *FetchStaleNodeEntriesRequest) String() string { return proto.CompactTextString(m) }
func (*FetchStaleNodeEntriesRequest) ProtoMessage()    {}
func (*FetchStaleNodeEntriesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_datastore_396395c57dd52724, []int{8}
}
func (m *FetchStaleNodeEntriesRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FetchStaleNodeEntriesRequest.Unmarshal(m, b)
}
func (m *FetchStaleNodeEntriesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FetchStaleNodeEntriesRequest.Marshal(b, m, deterministic)
}
func (dst *FetchStaleNodeEntriesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FetchStaleNodeEntriesRequest.Merge(dst, src)
}
func (m *FetchStaleNodeEntriesRequest) XXX_Size() int {
	return xxx_messageInfo_FetchStaleNodeEntriesRequest.Size(m)
}
func (m *FetchStaleNodeEntriesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_FetchStaleNodeEntriesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_FetchStaleNodeEntriesRequest proto.InternalMessageInfo

// Represents dead nodes for which the base SVID has expired
type FetchStaleNodeEntriesResponse struct {
	// List of attested node entries
	AttestedNodeEntryList []*AttestedNodeEntry `protobuf:"bytes,1,rep,name=attestedNodeEntryList" json:"attestedNodeEntryList,omitempty"`
	XXX_NoUnkeyedLiteral  struct{}             `json:"-"`
	XXX_unrecognized      []byte               `json:"-"`
	XXX_sizecache         int32                `json:"-"`
}

func (m *FetchStaleNodeEntriesResponse) Reset()         { *m = FetchStaleNodeEntriesResponse{} }
func (m *FetchStaleNodeEntriesResponse) String() string { return proto.CompactTextString(m) }
func (*FetchStaleNodeEntriesResponse) ProtoMessage()    {}
func (*FetchStaleNodeEntriesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_datastore_396395c57dd52724, []int{9}
}
func (m *FetchStaleNodeEntriesResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FetchStaleNodeEntriesResponse.Unmarshal(m, b)
}
func (m *FetchStaleNodeEntriesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FetchStaleNodeEntriesResponse.Marshal(b, m, deterministic)
}
func (dst *FetchStaleNodeEntriesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FetchStaleNodeEntriesResponse.Merge(dst, src)
}
func (m *FetchStaleNodeEntriesResponse) XXX_Size() int {
	return xxx_messageInfo_FetchStaleNodeEntriesResponse.Size(m)
}
func (m *FetchStaleNodeEntriesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_FetchStaleNodeEntriesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_FetchStaleNodeEntriesResponse proto.InternalMessageInfo

func (m *FetchStaleNodeEntriesResponse) GetAttestedNodeEntryList() []*AttestedNodeEntry {
	if m != nil {
		return m.AttestedNodeEntryList
	}
	return nil
}

// Represents Attested node entry fields to update
type UpdateAttestedNodeEntryRequest struct {
	// SPIFFE ID
	BaseSpiffeId string `protobuf:"bytes,1,opt,name=baseSpiffeId" json:"baseSpiffeId,omitempty"`
	// Serial number
	CertSerialNumber string `protobuf:"bytes,2,opt,name=certSerialNumber" json:"certSerialNumber,omitempty"`
	// Expiration date
	CertExpirationDate   string   `protobuf:"bytes,3,opt,name=certExpirationDate" json:"certExpirationDate,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateAttestedNodeEntryRequest) Reset()         { *m = UpdateAttestedNodeEntryRequest{} }
func (m *UpdateAttestedNodeEntryRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateAttestedNodeEntryRequest) ProtoMessage()    {}
func (*UpdateAttestedNodeEntryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_datastore_396395c57dd52724, []int{10}
}
func (m *UpdateAttestedNodeEntryRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateAttestedNodeEntryRequest.Unmarshal(m, b)
}
func (m *UpdateAttestedNodeEntryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateAttestedNodeEntryRequest.Marshal(b, m, deterministic)
}
func (dst *UpdateAttestedNodeEntryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateAttestedNodeEntryRequest.Merge(dst, src)
}
func (m *UpdateAttestedNodeEntryRequest) XXX_Size() int {
	return xxx_messageInfo_UpdateAttestedNodeEntryRequest.Size(m)
}
func (m *UpdateAttestedNodeEntryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateAttestedNodeEntryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateAttestedNodeEntryRequest proto.InternalMessageInfo

func (m *UpdateAttestedNodeEntryRequest) GetBaseSpiffeId() string {
	if m != nil {
		return m.BaseSpiffeId
	}
	return ""
}

func (m *UpdateAttestedNodeEntryRequest) GetCertSerialNumber() string {
	if m != nil {
		return m.CertSerialNumber
	}
	return ""
}

func (m *UpdateAttestedNodeEntryRequest) GetCertExpirationDate() string {
	if m != nil {
		return m.CertExpirationDate
	}
	return ""
}

// Represents the updated Attested node entry
type UpdateAttestedNodeEntryResponse struct {
	// Attested node entry
	AttestedNodeEntry    *AttestedNodeEntry `protobuf:"bytes,1,opt,name=attestedNodeEntry" json:"attestedNodeEntry,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *UpdateAttestedNodeEntryResponse) Reset()         { *m = UpdateAttestedNodeEntryResponse{} }
func (m *UpdateAttestedNodeEntryResponse) String() string { return proto.CompactTextString(m) }
func (*UpdateAttestedNodeEntryResponse) ProtoMessage()    {}
func (*UpdateAttestedNodeEntryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_datastore_396395c57dd52724, []int{11}
}
func (m *UpdateAttestedNodeEntryResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateAttestedNodeEntryResponse.Unmarshal(m, b)
}
func (m *UpdateAttestedNodeEntryResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateAttestedNodeEntryResponse.Marshal(b, m, deterministic)
}
func (dst *UpdateAttestedNodeEntryResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateAttestedNodeEntryResponse.Merge(dst, src)
}
func (m *UpdateAttestedNodeEntryResponse) XXX_Size() int {
	return xxx_messageInfo_UpdateAttestedNodeEntryResponse.Size(m)
}
func (m *UpdateAttestedNodeEntryResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateAttestedNodeEntryResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateAttestedNodeEntryResponse proto.InternalMessageInfo

func (m *UpdateAttestedNodeEntryResponse) GetAttestedNodeEntry() *AttestedNodeEntry {
	if m != nil {
		return m.AttestedNodeEntry
	}
	return nil
}

// Represents the Spiffe ID of the Attested node entry to delete
type DeleteAttestedNodeEntryRequest struct {
	// SPIFFE ID
	BaseSpiffeId         string   `protobuf:"bytes,1,opt,name=baseSpiffeId" json:"baseSpiffeId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteAttestedNodeEntryRequest) Reset()         { *m = DeleteAttestedNodeEntryRequest{} }
func (m *DeleteAttestedNodeEntryRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteAttestedNodeEntryRequest) ProtoMessage()    {}
func (*DeleteAttestedNodeEntryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_datastore_396395c57dd52724, []int{12}
}
func (m *DeleteAttestedNodeEntryRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteAttestedNodeEntryRequest.Unmarshal(m, b)
}
func (m *DeleteAttestedNodeEntryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteAttestedNodeEntryRequest.Marshal(b, m, deterministic)
}
func (dst *DeleteAttestedNodeEntryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteAttestedNodeEntryRequest.Merge(dst, src)
}
func (m *DeleteAttestedNodeEntryRequest) XXX_Size() int {
	return xxx_messageInfo_DeleteAttestedNodeEntryRequest.Size(m)
}
func (m *DeleteAttestedNodeEntryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteAttestedNodeEntryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteAttestedNodeEntryRequest proto.InternalMessageInfo

func (m *DeleteAttestedNodeEntryRequest) GetBaseSpiffeId() string {
	if m != nil {
		return m.BaseSpiffeId
	}
	return ""
}

// Represents the deleted Attested node entry
type DeleteAttestedNodeEntryResponse struct {
	AttestedNodeEntry    *AttestedNodeEntry `protobuf:"bytes,1,opt,name=attestedNodeEntry" json:"attestedNodeEntry,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *DeleteAttestedNodeEntryResponse) Reset()         { *m = DeleteAttestedNodeEntryResponse{} }
func (m *DeleteAttestedNodeEntryResponse) String() string { return proto.CompactTextString(m) }
func (*DeleteAttestedNodeEntryResponse) ProtoMessage()    {}
func (*DeleteAttestedNodeEntryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_datastore_396395c57dd52724, []int{13}
}
func (m *DeleteAttestedNodeEntryResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteAttestedNodeEntryResponse.Unmarshal(m, b)
}
func (m *DeleteAttestedNodeEntryResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteAttestedNodeEntryResponse.Marshal(b, m, deterministic)
}
func (dst *DeleteAttestedNodeEntryResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteAttestedNodeEntryResponse.Merge(dst, src)
}
func (m *DeleteAttestedNodeEntryResponse) XXX_Size() int {
	return xxx_messageInfo_DeleteAttestedNodeEntryResponse.Size(m)
}
func (m *DeleteAttestedNodeEntryResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteAttestedNodeEntryResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteAttestedNodeEntryResponse proto.InternalMessageInfo

func (m *DeleteAttestedNodeEntryResponse) GetAttestedNodeEntry() *AttestedNodeEntry {
	if m != nil {
		return m.AttestedNodeEntry
	}
	return nil
}

// Represents a Node resolver map entry to create
type CreateNodeResolverMapEntryRequest struct {
	// Node resolver map entry
	NodeResolverMapEntry *NodeResolverMapEntry `protobuf:"bytes,1,opt,name=nodeResolverMapEntry" json:"nodeResolverMapEntry,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *CreateNodeResolverMapEntryRequest) Reset()         { *m = CreateNodeResolverMapEntryRequest{} }
func (m *CreateNodeResolverMapEntryRequest) String() string { return proto.CompactTextString(m) }
func (*CreateNodeResolverMapEntryRequest) ProtoMessage()    {}
func (*CreateNodeResolverMapEntryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_datastore_396395c57dd52724, []int{14}
}
func (m *CreateNodeResolverMapEntryRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateNodeResolverMapEntryRequest.Unmarshal(m, b)
}
func (m *CreateNodeResolverMapEntryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateNodeResolverMapEntryRequest.Marshal(b, m, deterministic)
}
func (dst *CreateNodeResolverMapEntryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateNodeResolverMapEntryRequest.Merge(dst, src)
}
func (m *CreateNodeResolverMapEntryRequest) XXX_Size() int {
	return xxx_messageInfo_CreateNodeResolverMapEntryRequest.Size(m)
}
func (m *CreateNodeResolverMapEntryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateNodeResolverMapEntryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateNodeResolverMapEntryRequest proto.InternalMessageInfo

func (m *CreateNodeResolverMapEntryRequest) GetNodeResolverMapEntry() *NodeResolverMapEntry {
	if m != nil {
		return m.NodeResolverMapEntry
	}
	return nil
}

// Represents the created Node resolver map entry
type CreateNodeResolverMapEntryResponse struct {
	// Node resolver map entry
	NodeResolverMapEntry *NodeResolverMapEntry `protobuf:"bytes,1,opt,name=nodeResolverMapEntry" json:"nodeResolverMapEntry,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *CreateNodeResolverMapEntryResponse) Reset()         { *m = CreateNodeResolverMapEntryResponse{} }
func (m *CreateNodeResolverMapEntryResponse) String() string { return proto.CompactTextString(m) }
func (*CreateNodeResolverMapEntryResponse) ProtoMessage()    {}
func (*CreateNodeResolverMapEntryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_datastore_396395c57dd52724, []int{15}
}
func (m *CreateNodeResolverMapEntryResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateNodeResolverMapEntryResponse.Unmarshal(m, b)
}
func (m *CreateNodeResolverMapEntryResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateNodeResolverMapEntryResponse.Marshal(b, m, deterministic)
}
func (dst *CreateNodeResolverMapEntryResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateNodeResolverMapEntryResponse.Merge(dst, src)
}
func (m *CreateNodeResolverMapEntryResponse) XXX_Size() int {
	return xxx_messageInfo_CreateNodeResolverMapEntryResponse.Size(m)
}
func (m *CreateNodeResolverMapEntryResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateNodeResolverMapEntryResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CreateNodeResolverMapEntryResponse proto.InternalMessageInfo

func (m *CreateNodeResolverMapEntryResponse) GetNodeResolverMapEntry() *NodeResolverMapEntry {
	if m != nil {
		return m.NodeResolverMapEntry
	}
	return nil
}

// Represents a Spiffe ID
type FetchNodeResolverMapEntryRequest struct {
	// SPIFFE ID
	BaseSpiffeId         string   `protobuf:"bytes,1,opt,name=baseSpiffeId" json:"baseSpiffeId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FetchNodeResolverMapEntryRequest) Reset()         { *m = FetchNodeResolverMapEntryRequest{} }
func (m *FetchNodeResolverMapEntryRequest) String() string { return proto.CompactTextString(m) }
func (*FetchNodeResolverMapEntryRequest) ProtoMessage()    {}
func (*FetchNodeResolverMapEntryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_datastore_396395c57dd52724, []int{16}
}
func (m *FetchNodeResolverMapEntryRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FetchNodeResolverMapEntryRequest.Unmarshal(m, b)
}
func (m *FetchNodeResolverMapEntryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FetchNodeResolverMapEntryRequest.Marshal(b, m, deterministic)
}
func (dst *FetchNodeResolverMapEntryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FetchNodeResolverMapEntryRequest.Merge(dst, src)
}
func (m *FetchNodeResolverMapEntryRequest) XXX_Size() int {
	return xxx_messageInfo_FetchNodeResolverMapEntryRequest.Size(m)
}
func (m *FetchNodeResolverMapEntryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_FetchNodeResolverMapEntryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_FetchNodeResolverMapEntryRequest proto.InternalMessageInfo

func (m *FetchNodeResolverMapEntryRequest) GetBaseSpiffeId() string {
	if m != nil {
		return m.BaseSpiffeId
	}
	return ""
}

// Represents a list of Node resolver map entries for the specified Spiffe ID
type FetchNodeResolverMapEntryResponse struct {
	// List of Node resolver map entries
	NodeResolverMapEntryList []*NodeResolverMapEntry `protobuf:"bytes,1,rep,name=nodeResolverMapEntryList" json:"nodeResolverMapEntryList,omitempty"`
	XXX_NoUnkeyedLiteral     struct{}                `json:"-"`
	XXX_unrecognized         []byte                  `json:"-"`
	XXX_sizecache            int32                   `json:"-"`
}

func (m *FetchNodeResolverMapEntryResponse) Reset()         { *m = FetchNodeResolverMapEntryResponse{} }
func (m *FetchNodeResolverMapEntryResponse) String() string { return proto.CompactTextString(m) }
func (*FetchNodeResolverMapEntryResponse) ProtoMessage()    {}
func (*FetchNodeResolverMapEntryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_datastore_396395c57dd52724, []int{17}
}
func (m *FetchNodeResolverMapEntryResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FetchNodeResolverMapEntryResponse.Unmarshal(m, b)
}
func (m *FetchNodeResolverMapEntryResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FetchNodeResolverMapEntryResponse.Marshal(b, m, deterministic)
}
func (dst *FetchNodeResolverMapEntryResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FetchNodeResolverMapEntryResponse.Merge(dst, src)
}
func (m *FetchNodeResolverMapEntryResponse) XXX_Size() int {
	return xxx_messageInfo_FetchNodeResolverMapEntryResponse.Size(m)
}
func (m *FetchNodeResolverMapEntryResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_FetchNodeResolverMapEntryResponse.DiscardUnknown(m)
}

var xxx_messageInfo_FetchNodeResolverMapEntryResponse proto.InternalMessageInfo

func (m *FetchNodeResolverMapEntryResponse) GetNodeResolverMapEntryList() []*NodeResolverMapEntry {
	if m != nil {
		return m.NodeResolverMapEntryList
	}
	return nil
}

// Represents a Node resolver map entry to delete
type DeleteNodeResolverMapEntryRequest struct {
	// Node resolver map entry
	NodeResolverMapEntry *NodeResolverMapEntry `protobuf:"bytes,1,opt,name=nodeResolverMapEntry" json:"nodeResolverMapEntry,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *DeleteNodeResolverMapEntryRequest) Reset()         { *m = DeleteNodeResolverMapEntryRequest{} }
func (m *DeleteNodeResolverMapEntryRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteNodeResolverMapEntryRequest) ProtoMessage()    {}
func (*DeleteNodeResolverMapEntryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_datastore_396395c57dd52724, []int{18}
}
func (m *DeleteNodeResolverMapEntryRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteNodeResolverMapEntryRequest.Unmarshal(m, b)
}
func (m *DeleteNodeResolverMapEntryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteNodeResolverMapEntryRequest.Marshal(b, m, deterministic)
}
func (dst *DeleteNodeResolverMapEntryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteNodeResolverMapEntryRequest.Merge(dst, src)
}
func (m *DeleteNodeResolverMapEntryRequest) XXX_Size() int {
	return xxx_messageInfo_DeleteNodeResolverMapEntryRequest.Size(m)
}
func (m *DeleteNodeResolverMapEntryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteNodeResolverMapEntryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteNodeResolverMapEntryRequest proto.InternalMessageInfo

func (m *DeleteNodeResolverMapEntryRequest) GetNodeResolverMapEntry() *NodeResolverMapEntry {
	if m != nil {
		return m.NodeResolverMapEntry
	}
	return nil
}

// Represents a list of Node resolver map entries
type DeleteNodeResolverMapEntryResponse struct {
	// List of Node resolver map entries
	NodeResolverMapEntryList []*NodeResolverMapEntry `protobuf:"bytes,1,rep,name=nodeResolverMapEntryList" json:"nodeResolverMapEntryList,omitempty"`
	XXX_NoUnkeyedLiteral     struct{}                `json:"-"`
	XXX_unrecognized         []byte                  `json:"-"`
	XXX_sizecache            int32                   `json:"-"`
}

func (m *DeleteNodeResolverMapEntryResponse) Reset()         { *m = DeleteNodeResolverMapEntryResponse{} }
func (m *DeleteNodeResolverMapEntryResponse) String() string { return proto.CompactTextString(m) }
func (*DeleteNodeResolverMapEntryResponse) ProtoMessage()    {}
func (*DeleteNodeResolverMapEntryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_datastore_396395c57dd52724, []int{19}
}
func (m *DeleteNodeResolverMapEntryResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteNodeResolverMapEntryResponse.Unmarshal(m, b)
}
func (m *DeleteNodeResolverMapEntryResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteNodeResolverMapEntryResponse.Marshal(b, m, deterministic)
}
func (dst *DeleteNodeResolverMapEntryResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteNodeResolverMapEntryResponse.Merge(dst, src)
}
func (m *DeleteNodeResolverMapEntryResponse) XXX_Size() int {
	return xxx_messageInfo_DeleteNodeResolverMapEntryResponse.Size(m)
}
func (m *DeleteNodeResolverMapEntryResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteNodeResolverMapEntryResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteNodeResolverMapEntryResponse proto.InternalMessageInfo

func (m *DeleteNodeResolverMapEntryResponse) GetNodeResolverMapEntryList() []*NodeResolverMapEntry {
	if m != nil {
		return m.NodeResolverMapEntryList
	}
	return nil
}

// Represents a list of Node resolver map entries
type RectifyNodeResolverMapEntriesRequest struct {
	// List of Node resolver map entries
	NodeResolverMapEntryList []*NodeResolverMapEntry `protobuf:"bytes,1,rep,name=nodeResolverMapEntryList" json:"nodeResolverMapEntryList,omitempty"`
	XXX_NoUnkeyedLiteral     struct{}                `json:"-"`
	XXX_unrecognized         []byte                  `json:"-"`
	XXX_sizecache            int32                   `json:"-"`
}

func (m *RectifyNodeResolverMapEntriesRequest) Reset()         { *m = RectifyNodeResolverMapEntriesRequest{} }
func (m *RectifyNodeResolverMapEntriesRequest) String() string { return proto.CompactTextString(m) }
func (*RectifyNodeResolverMapEntriesRequest) ProtoMessage()    {}
func (*RectifyNodeResolverMapEntriesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_datastore_396395c57dd52724, []int{20}
}
func (m *RectifyNodeResolverMapEntriesRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RectifyNodeResolverMapEntriesRequest.Unmarshal(m, b)
}
func (m *RectifyNodeResolverMapEntriesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RectifyNodeResolverMapEntriesRequest.Marshal(b, m, deterministic)
}
func (dst *RectifyNodeResolverMapEntriesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RectifyNodeResolverMapEntriesRequest.Merge(dst, src)
}
func (m *RectifyNodeResolverMapEntriesRequest) XXX_Size() int {
	return xxx_messageInfo_RectifyNodeResolverMapEntriesRequest.Size(m)
}
func (m *RectifyNodeResolverMapEntriesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RectifyNodeResolverMapEntriesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RectifyNodeResolverMapEntriesRequest proto.InternalMessageInfo

func (m *RectifyNodeResolverMapEntriesRequest) GetNodeResolverMapEntryList() []*NodeResolverMapEntry {
	if m != nil {
		return m.NodeResolverMapEntryList
	}
	return nil
}

// Represents a list of Node resolver map entries
type RectifyNodeResolverMapEntriesResponse struct {
	// List of Node resolver map entries
	NodeResolverMapEntryList []*NodeResolverMapEntry `protobuf:"bytes,1,rep,name=nodeResolverMapEntryList" json:"nodeResolverMapEntryList,omitempty"`
	XXX_NoUnkeyedLiteral     struct{}                `json:"-"`
	XXX_unrecognized         []byte                  `json:"-"`
	XXX_sizecache            int32                   `json:"-"`
}

func (m *RectifyNodeResolverMapEntriesResponse) Reset()         { *m = RectifyNodeResolverMapEntriesResponse{} }
func (m *RectifyNodeResolverMapEntriesResponse) String() string { return proto.CompactTextString(m) }
func (*RectifyNodeResolverMapEntriesResponse) ProtoMessage()    {}
func (*RectifyNodeResolverMapEntriesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_datastore_396395c57dd52724, []int{21}
}
func (m *RectifyNodeResolverMapEntriesResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RectifyNodeResolverMapEntriesResponse.Unmarshal(m, b)
}
func (m *RectifyNodeResolverMapEntriesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RectifyNodeResolverMapEntriesResponse.Marshal(b, m, deterministic)
}
func (dst *RectifyNodeResolverMapEntriesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RectifyNodeResolverMapEntriesResponse.Merge(dst, src)
}
func (m *RectifyNodeResolverMapEntriesResponse) XXX_Size() int {
	return xxx_messageInfo_RectifyNodeResolverMapEntriesResponse.Size(m)
}
func (m *RectifyNodeResolverMapEntriesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RectifyNodeResolverMapEntriesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RectifyNodeResolverMapEntriesResponse proto.InternalMessageInfo

func (m *RectifyNodeResolverMapEntriesResponse) GetNodeResolverMapEntryList() []*NodeResolverMapEntry {
	if m != nil {
		return m.NodeResolverMapEntryList
	}
	return nil
}

// Represents a Registration entry to create
type CreateRegistrationEntryRequest struct {
	// Registration entry
	RegisteredEntry      *common.RegistrationEntry `protobuf:"bytes,1,opt,name=registeredEntry" json:"registeredEntry,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *CreateRegistrationEntryRequest) Reset()         { *m = CreateRegistrationEntryRequest{} }
func (m *CreateRegistrationEntryRequest) String() string { return proto.CompactTextString(m) }
func (*CreateRegistrationEntryRequest) ProtoMessage()    {}
func (*CreateRegistrationEntryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_datastore_396395c57dd52724, []int{22}
}
func (m *CreateRegistrationEntryRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateRegistrationEntryRequest.Unmarshal(m, b)
}
func (m *CreateRegistrationEntryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateRegistrationEntryRequest.Marshal(b, m, deterministic)
}
func (dst *CreateRegistrationEntryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateRegistrationEntryRequest.Merge(dst, src)
}
func (m *CreateRegistrationEntryRequest) XXX_Size() int {
	return xxx_messageInfo_CreateRegistrationEntryRequest.Size(m)
}
func (m *CreateRegistrationEntryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateRegistrationEntryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateRegistrationEntryRequest proto.InternalMessageInfo

func (m *CreateRegistrationEntryRequest) GetRegisteredEntry() *common.RegistrationEntry {
	if m != nil {
		return m.RegisteredEntry
	}
	return nil
}

// Represents the created Registration entry
type CreateRegistrationEntryResponse struct {
	// Registration entry ID
	RegisteredEntryId    string   `protobuf:"bytes,1,opt,name=registeredEntryId" json:"registeredEntryId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateRegistrationEntryResponse) Reset()         { *m = CreateRegistrationEntryResponse{} }
func (m *CreateRegistrationEntryResponse) String() string { return proto.CompactTextString(m) }
func (*CreateRegistrationEntryResponse) ProtoMessage()    {}
func (*CreateRegistrationEntryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_datastore_396395c57dd52724, []int{23}
}
func (m *CreateRegistrationEntryResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateRegistrationEntryResponse.Unmarshal(m, b)
}
func (m *CreateRegistrationEntryResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateRegistrationEntryResponse.Marshal(b, m, deterministic)
}
func (dst *CreateRegistrationEntryResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateRegistrationEntryResponse.Merge(dst, src)
}
func (m *CreateRegistrationEntryResponse) XXX_Size() int {
	return xxx_messageInfo_CreateRegistrationEntryResponse.Size(m)
}
func (m *CreateRegistrationEntryResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateRegistrationEntryResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CreateRegistrationEntryResponse proto.InternalMessageInfo

func (m *CreateRegistrationEntryResponse) GetRegisteredEntryId() string {
	if m != nil {
		return m.RegisteredEntryId
	}
	return ""
}

// Represents a Registration entry ID to fetch
type FetchRegistrationEntryRequest struct {
	// Registration entry ID
	RegisteredEntryId    string   `protobuf:"bytes,1,opt,name=registeredEntryId" json:"registeredEntryId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FetchRegistrationEntryRequest) Reset()         { *m = FetchRegistrationEntryRequest{} }
func (m *FetchRegistrationEntryRequest) String() string { return proto.CompactTextString(m) }
func (*FetchRegistrationEntryRequest) ProtoMessage()    {}
func (*FetchRegistrationEntryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_datastore_396395c57dd52724, []int{24}
}
func (m *FetchRegistrationEntryRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FetchRegistrationEntryRequest.Unmarshal(m, b)
}
func (m *FetchRegistrationEntryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FetchRegistrationEntryRequest.Marshal(b, m, deterministic)
}
func (dst *FetchRegistrationEntryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FetchRegistrationEntryRequest.Merge(dst, src)
}
func (m *FetchRegistrationEntryRequest) XXX_Size() int {
	return xxx_messageInfo_FetchRegistrationEntryRequest.Size(m)
}
func (m *FetchRegistrationEntryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_FetchRegistrationEntryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_FetchRegistrationEntryRequest proto.InternalMessageInfo

func (m *FetchRegistrationEntryRequest) GetRegisteredEntryId() string {
	if m != nil {
		return m.RegisteredEntryId
	}
	return ""
}

// Represents a Registration entry
type FetchRegistrationEntryResponse struct {
	// Registration entry
	RegisteredEntry      *common.RegistrationEntry `protobuf:"bytes,1,opt,name=registeredEntry" json:"registeredEntry,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *FetchRegistrationEntryResponse) Reset()         { *m = FetchRegistrationEntryResponse{} }
func (m *FetchRegistrationEntryResponse) String() string { return proto.CompactTextString(m) }
func (*FetchRegistrationEntryResponse) ProtoMessage()    {}
func (*FetchRegistrationEntryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_datastore_396395c57dd52724, []int{25}
}
func (m *FetchRegistrationEntryResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FetchRegistrationEntryResponse.Unmarshal(m, b)
}
func (m *FetchRegistrationEntryResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FetchRegistrationEntryResponse.Marshal(b, m, deterministic)
}
func (dst *FetchRegistrationEntryResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FetchRegistrationEntryResponse.Merge(dst, src)
}
func (m *FetchRegistrationEntryResponse) XXX_Size() int {
	return xxx_messageInfo_FetchRegistrationEntryResponse.Size(m)
}
func (m *FetchRegistrationEntryResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_FetchRegistrationEntryResponse.DiscardUnknown(m)
}

var xxx_messageInfo_FetchRegistrationEntryResponse proto.InternalMessageInfo

func (m *FetchRegistrationEntryResponse) GetRegisteredEntry() *common.RegistrationEntry {
	if m != nil {
		return m.RegisteredEntry
	}
	return nil
}

// Represents a list of Registration entries
type FetchRegistrationEntriesResponse struct {
	// Registration entries
	RegisteredEntries    *common.RegistrationEntries `protobuf:"bytes,1,opt,name=registeredEntries" json:"registeredEntries,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *FetchRegistrationEntriesResponse) Reset()         { *m = FetchRegistrationEntriesResponse{} }
func (m *FetchRegistrationEntriesResponse) String() string { return proto.CompactTextString(m) }
func (*FetchRegistrationEntriesResponse) ProtoMessage()    {}
func (*FetchRegistrationEntriesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_datastore_396395c57dd52724, []int{26}
}
func (m *FetchRegistrationEntriesResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FetchRegistrationEntriesResponse.Unmarshal(m, b)
}
func (m *FetchRegistrationEntriesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FetchRegistrationEntriesResponse.Marshal(b, m, deterministic)
}
func (dst *FetchRegistrationEntriesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FetchRegistrationEntriesResponse.Merge(dst, src)
}
func (m *FetchRegistrationEntriesResponse) XXX_Size() int {
	return xxx_messageInfo_FetchRegistrationEntriesResponse.Size(m)
}
func (m *FetchRegistrationEntriesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_FetchRegistrationEntriesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_FetchRegistrationEntriesResponse proto.InternalMessageInfo

func (m *FetchRegistrationEntriesResponse) GetRegisteredEntries() *common.RegistrationEntries {
	if m != nil {
		return m.RegisteredEntries
	}
	return nil
}

// Represents a Registration entry to update
type UpdateRegistrationEntryRequest struct {
	// Registration entry ID
	RegisteredEntryId string `protobuf:"bytes,1,opt,name=registeredEntryId" json:"registeredEntryId,omitempty"`
	// Registration entry
	RegisteredEntry      *common.RegistrationEntry `protobuf:"bytes,2,opt,name=registeredEntry" json:"registeredEntry,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *UpdateRegistrationEntryRequest) Reset()         { *m = UpdateRegistrationEntryRequest{} }
func (m *UpdateRegistrationEntryRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateRegistrationEntryRequest) ProtoMessage()    {}
func (*UpdateRegistrationEntryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_datastore_396395c57dd52724, []int{27}
}
func (m *UpdateRegistrationEntryRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateRegistrationEntryRequest.Unmarshal(m, b)
}
func (m *UpdateRegistrationEntryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateRegistrationEntryRequest.Marshal(b, m, deterministic)
}
func (dst *UpdateRegistrationEntryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateRegistrationEntryRequest.Merge(dst, src)
}
func (m *UpdateRegistrationEntryRequest) XXX_Size() int {
	return xxx_messageInfo_UpdateRegistrationEntryRequest.Size(m)
}
func (m *UpdateRegistrationEntryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateRegistrationEntryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateRegistrationEntryRequest proto.InternalMessageInfo

func (m *UpdateRegistrationEntryRequest) GetRegisteredEntryId() string {
	if m != nil {
		return m.RegisteredEntryId
	}
	return ""
}

func (m *UpdateRegistrationEntryRequest) GetRegisteredEntry() *common.RegistrationEntry {
	if m != nil {
		return m.RegisteredEntry
	}
	return nil
}

// Represents the updated Registration entry
type UpdateRegistrationEntryResponse struct {
	// Registration entry
	RegisteredEntry      *common.RegistrationEntry `protobuf:"bytes,1,opt,name=registeredEntry" json:"registeredEntry,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *UpdateRegistrationEntryResponse) Reset()         { *m = UpdateRegistrationEntryResponse{} }
func (m *UpdateRegistrationEntryResponse) String() string { return proto.CompactTextString(m) }
func (*UpdateRegistrationEntryResponse) ProtoMessage()    {}
func (*UpdateRegistrationEntryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_datastore_396395c57dd52724, []int{28}
}
func (m *UpdateRegistrationEntryResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateRegistrationEntryResponse.Unmarshal(m, b)
}
func (m *UpdateRegistrationEntryResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateRegistrationEntryResponse.Marshal(b, m, deterministic)
}
func (dst *UpdateRegistrationEntryResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateRegistrationEntryResponse.Merge(dst, src)
}
func (m *UpdateRegistrationEntryResponse) XXX_Size() int {
	return xxx_messageInfo_UpdateRegistrationEntryResponse.Size(m)
}
func (m *UpdateRegistrationEntryResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateRegistrationEntryResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateRegistrationEntryResponse proto.InternalMessageInfo

func (m *UpdateRegistrationEntryResponse) GetRegisteredEntry() *common.RegistrationEntry {
	if m != nil {
		return m.RegisteredEntry
	}
	return nil
}

// Represents a Registration entry ID to delete
type DeleteRegistrationEntryRequest struct {
	// Registration entry ID
	RegisteredEntryId    string   `protobuf:"bytes,1,opt,name=registeredEntryId" json:"registeredEntryId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteRegistrationEntryRequest) Reset()         { *m = DeleteRegistrationEntryRequest{} }
func (m *DeleteRegistrationEntryRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteRegistrationEntryRequest) ProtoMessage()    {}
func (*DeleteRegistrationEntryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_datastore_396395c57dd52724, []int{29}
}
func (m *DeleteRegistrationEntryRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteRegistrationEntryRequest.Unmarshal(m, b)
}
func (m *DeleteRegistrationEntryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteRegistrationEntryRequest.Marshal(b, m, deterministic)
}
func (dst *DeleteRegistrationEntryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteRegistrationEntryRequest.Merge(dst, src)
}
func (m *DeleteRegistrationEntryRequest) XXX_Size() int {
	return xxx_messageInfo_DeleteRegistrationEntryRequest.Size(m)
}
func (m *DeleteRegistrationEntryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteRegistrationEntryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteRegistrationEntryRequest proto.InternalMessageInfo

func (m *DeleteRegistrationEntryRequest) GetRegisteredEntryId() string {
	if m != nil {
		return m.RegisteredEntryId
	}
	return ""
}

// Represents the deleted Registration entry
type DeleteRegistrationEntryResponse struct {
	// Registration entry
	RegisteredEntry      *common.RegistrationEntry `protobuf:"bytes,1,opt,name=registeredEntry" json:"registeredEntry,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *DeleteRegistrationEntryResponse) Reset()         { *m = DeleteRegistrationEntryResponse{} }
func (m *DeleteRegistrationEntryResponse) String() string { return proto.CompactTextString(m) }
func (*DeleteRegistrationEntryResponse) ProtoMessage()    {}
func (*DeleteRegistrationEntryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_datastore_396395c57dd52724, []int{30}
}
func (m *DeleteRegistrationEntryResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteRegistrationEntryResponse.Unmarshal(m, b)
}
func (m *DeleteRegistrationEntryResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteRegistrationEntryResponse.Marshal(b, m, deterministic)
}
func (dst *DeleteRegistrationEntryResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteRegistrationEntryResponse.Merge(dst, src)
}
func (m *DeleteRegistrationEntryResponse) XXX_Size() int {
	return xxx_messageInfo_DeleteRegistrationEntryResponse.Size(m)
}
func (m *DeleteRegistrationEntryResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteRegistrationEntryResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteRegistrationEntryResponse proto.InternalMessageInfo

func (m *DeleteRegistrationEntryResponse) GetRegisteredEntry() *common.RegistrationEntry {
	if m != nil {
		return m.RegisteredEntry
	}
	return nil
}

// Represents a Parent ID
type ListParentIDEntriesRequest struct {
	// Parent ID
	ParentId             string   `protobuf:"bytes,1,opt,name=parentId" json:"parentId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListParentIDEntriesRequest) Reset()         { *m = ListParentIDEntriesRequest{} }
func (m *ListParentIDEntriesRequest) String() string { return proto.CompactTextString(m) }
func (*ListParentIDEntriesRequest) ProtoMessage()    {}
func (*ListParentIDEntriesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_datastore_396395c57dd52724, []int{31}
}
func (m *ListParentIDEntriesRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListParentIDEntriesRequest.Unmarshal(m, b)
}
func (m *ListParentIDEntriesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListParentIDEntriesRequest.Marshal(b, m, deterministic)
}
func (dst *ListParentIDEntriesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListParentIDEntriesRequest.Merge(dst, src)
}
func (m *ListParentIDEntriesRequest) XXX_Size() int {
	return xxx_messageInfo_ListParentIDEntriesRequest.Size(m)
}
func (m *ListParentIDEntriesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListParentIDEntriesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListParentIDEntriesRequest proto.InternalMessageInfo

func (m *ListParentIDEntriesRequest) GetParentId() string {
	if m != nil {
		return m.ParentId
	}
	return ""
}

// Represents a list of Registered entries with the specified Parent ID
type ListParentIDEntriesResponse struct {
	// List of Registration entries
	RegisteredEntryList  []*common.RegistrationEntry `protobuf:"bytes,1,rep,name=registeredEntryList" json:"registeredEntryList,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *ListParentIDEntriesResponse) Reset()         { *m = ListParentIDEntriesResponse{} }
func (m *ListParentIDEntriesResponse) String() string { return proto.CompactTextString(m) }
func (*ListParentIDEntriesResponse) ProtoMessage()    {}
func (*ListParentIDEntriesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_datastore_396395c57dd52724, []int{32}
}
func (m *ListParentIDEntriesResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListParentIDEntriesResponse.Unmarshal(m, b)
}
func (m *ListParentIDEntriesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListParentIDEntriesResponse.Marshal(b, m, deterministic)
}
func (dst *ListParentIDEntriesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListParentIDEntriesResponse.Merge(dst, src)
}
func (m *ListParentIDEntriesResponse) XXX_Size() int {
	return xxx_messageInfo_ListParentIDEntriesResponse.Size(m)
}
func (m *ListParentIDEntriesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListParentIDEntriesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListParentIDEntriesResponse proto.InternalMessageInfo

func (m *ListParentIDEntriesResponse) GetRegisteredEntryList() []*common.RegistrationEntry {
	if m != nil {
		return m.RegisteredEntryList
	}
	return nil
}

// Represents a selector
type ListSelectorEntriesRequest struct {
	// Selector
	Selectors            []*common.Selector `protobuf:"bytes,1,rep,name=selectors" json:"selectors,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *ListSelectorEntriesRequest) Reset()         { *m = ListSelectorEntriesRequest{} }
func (m *ListSelectorEntriesRequest) String() string { return proto.CompactTextString(m) }
func (*ListSelectorEntriesRequest) ProtoMessage()    {}
func (*ListSelectorEntriesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_datastore_396395c57dd52724, []int{33}
}
func (m *ListSelectorEntriesRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListSelectorEntriesRequest.Unmarshal(m, b)
}
func (m *ListSelectorEntriesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListSelectorEntriesRequest.Marshal(b, m, deterministic)
}
func (dst *ListSelectorEntriesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListSelectorEntriesRequest.Merge(dst, src)
}
func (m *ListSelectorEntriesRequest) XXX_Size() int {
	return xxx_messageInfo_ListSelectorEntriesRequest.Size(m)
}
func (m *ListSelectorEntriesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListSelectorEntriesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListSelectorEntriesRequest proto.InternalMessageInfo

func (m *ListSelectorEntriesRequest) GetSelectors() []*common.Selector {
	if m != nil {
		return m.Selectors
	}
	return nil
}

// Represents a list of Registered entries with the specified selector
type ListSelectorEntriesResponse struct {
	// List of Registration entries
	RegisteredEntryList  []*common.RegistrationEntry `protobuf:"bytes,1,rep,name=registeredEntryList" json:"registeredEntryList,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *ListSelectorEntriesResponse) Reset()         { *m = ListSelectorEntriesResponse{} }
func (m *ListSelectorEntriesResponse) String() string { return proto.CompactTextString(m) }
func (*ListSelectorEntriesResponse) ProtoMessage()    {}
func (*ListSelectorEntriesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_datastore_396395c57dd52724, []int{34}
}
func (m *ListSelectorEntriesResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListSelectorEntriesResponse.Unmarshal(m, b)
}
func (m *ListSelectorEntriesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListSelectorEntriesResponse.Marshal(b, m, deterministic)
}
func (dst *ListSelectorEntriesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListSelectorEntriesResponse.Merge(dst, src)
}
func (m *ListSelectorEntriesResponse) XXX_Size() int {
	return xxx_messageInfo_ListSelectorEntriesResponse.Size(m)
}
func (m *ListSelectorEntriesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListSelectorEntriesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListSelectorEntriesResponse proto.InternalMessageInfo

func (m *ListSelectorEntriesResponse) GetRegisteredEntryList() []*common.RegistrationEntry {
	if m != nil {
		return m.RegisteredEntryList
	}
	return nil
}

// Represents a Spiffe ID
type ListSpiffeEntriesRequest struct {
	// SPIFFE ID
	SpiffeId             string   `protobuf:"bytes,1,opt,name=spiffeId" json:"spiffeId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListSpiffeEntriesRequest) Reset()         { *m = ListSpiffeEntriesRequest{} }
func (m *ListSpiffeEntriesRequest) String() string { return proto.CompactTextString(m) }
func (*ListSpiffeEntriesRequest) ProtoMessage()    {}
func (*ListSpiffeEntriesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_datastore_396395c57dd52724, []int{35}
}
func (m *ListSpiffeEntriesRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListSpiffeEntriesRequest.Unmarshal(m, b)
}
func (m *ListSpiffeEntriesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListSpiffeEntriesRequest.Marshal(b, m, deterministic)
}
func (dst *ListSpiffeEntriesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListSpiffeEntriesRequest.Merge(dst, src)
}
func (m *ListSpiffeEntriesRequest) XXX_Size() int {
	return xxx_messageInfo_ListSpiffeEntriesRequest.Size(m)
}
func (m *ListSpiffeEntriesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListSpiffeEntriesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListSpiffeEntriesRequest proto.InternalMessageInfo

func (m *ListSpiffeEntriesRequest) GetSpiffeId() string {
	if m != nil {
		return m.SpiffeId
	}
	return ""
}

// Represents a list of Registered entries with the specified Spiffe ID
type ListSpiffeEntriesResponse struct {
	// List of Registration entries
	RegisteredEntryList  []*common.RegistrationEntry `protobuf:"bytes,1,rep,name=registeredEntryList" json:"registeredEntryList,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *ListSpiffeEntriesResponse) Reset()         { *m = ListSpiffeEntriesResponse{} }
func (m *ListSpiffeEntriesResponse) String() string { return proto.CompactTextString(m) }
func (*ListSpiffeEntriesResponse) ProtoMessage()    {}
func (*ListSpiffeEntriesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_datastore_396395c57dd52724, []int{36}
}
func (m *ListSpiffeEntriesResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListSpiffeEntriesResponse.Unmarshal(m, b)
}
func (m *ListSpiffeEntriesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListSpiffeEntriesResponse.Marshal(b, m, deterministic)
}
func (dst *ListSpiffeEntriesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListSpiffeEntriesResponse.Merge(dst, src)
}
func (m *ListSpiffeEntriesResponse) XXX_Size() int {
	return xxx_messageInfo_ListSpiffeEntriesResponse.Size(m)
}
func (m *ListSpiffeEntriesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListSpiffeEntriesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListSpiffeEntriesResponse proto.InternalMessageInfo

func (m *ListSpiffeEntriesResponse) GetRegisteredEntryList() []*common.RegistrationEntry {
	if m != nil {
		return m.RegisteredEntryList
	}
	return nil
}

// Represents a join token and associated metadata, if known
type JoinToken struct {
	Token string `protobuf:"bytes,1,opt,name=token" json:"token,omitempty"`
	// Expiration date, represented in UNIX time
	Expiry               int64    `protobuf:"varint,2,opt,name=expiry" json:"expiry,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *JoinToken) Reset()         { *m = JoinToken{} }
func (m *JoinToken) String() string { return proto.CompactTextString(m) }
func (*JoinToken) ProtoMessage()    {}
func (*JoinToken) Descriptor() ([]byte, []int) {
	return fileDescriptor_datastore_396395c57dd52724, []int{37}
}
func (m *JoinToken) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_JoinToken.Unmarshal(m, b)
}
func (m *JoinToken) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_JoinToken.Marshal(b, m, deterministic)
}
func (dst *JoinToken) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JoinToken.Merge(dst, src)
}
func (m *JoinToken) XXX_Size() int {
	return xxx_messageInfo_JoinToken.Size(m)
}
func (m *JoinToken) XXX_DiscardUnknown() {
	xxx_messageInfo_JoinToken.DiscardUnknown(m)
}

var xxx_messageInfo_JoinToken proto.InternalMessageInfo

func (m *JoinToken) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *JoinToken) GetExpiry() int64 {
	if m != nil {
		return m.Expiry
	}
	return 0
}

func init() {
	proto.RegisterType((*Bundle)(nil), "spire.server.datastore.Bundle")
	proto.RegisterType((*Bundles)(nil), "spire.server.datastore.Bundles")
	proto.RegisterType((*NodeResolverMapEntry)(nil), "spire.server.datastore.NodeResolverMapEntry")
	proto.RegisterType((*AttestedNodeEntry)(nil), "spire.server.datastore.AttestedNodeEntry")
	proto.RegisterType((*CreateAttestedNodeEntryRequest)(nil), "spire.server.datastore.CreateAttestedNodeEntryRequest")
	proto.RegisterType((*CreateAttestedNodeEntryResponse)(nil), "spire.server.datastore.CreateAttestedNodeEntryResponse")
	proto.RegisterType((*FetchAttestedNodeEntryRequest)(nil), "spire.server.datastore.FetchAttestedNodeEntryRequest")
	proto.RegisterType((*FetchAttestedNodeEntryResponse)(nil), "spire.server.datastore.FetchAttestedNodeEntryResponse")
	proto.RegisterType((*FetchStaleNodeEntriesRequest)(nil), "spire.server.datastore.FetchStaleNodeEntriesRequest")
	proto.RegisterType((*FetchStaleNodeEntriesResponse)(nil), "spire.server.datastore.FetchStaleNodeEntriesResponse")
	proto.RegisterType((*UpdateAttestedNodeEntryRequest)(nil), "spire.server.datastore.UpdateAttestedNodeEntryRequest")
	proto.RegisterType((*UpdateAttestedNodeEntryResponse)(nil), "spire.server.datastore.UpdateAttestedNodeEntryResponse")
	proto.RegisterType((*DeleteAttestedNodeEntryRequest)(nil), "spire.server.datastore.DeleteAttestedNodeEntryRequest")
	proto.RegisterType((*DeleteAttestedNodeEntryResponse)(nil), "spire.server.datastore.DeleteAttestedNodeEntryResponse")
	proto.RegisterType((*CreateNodeResolverMapEntryRequest)(nil), "spire.server.datastore.CreateNodeResolverMapEntryRequest")
	proto.RegisterType((*CreateNodeResolverMapEntryResponse)(nil), "spire.server.datastore.CreateNodeResolverMapEntryResponse")
	proto.RegisterType((*FetchNodeResolverMapEntryRequest)(nil), "spire.server.datastore.FetchNodeResolverMapEntryRequest")
	proto.RegisterType((*FetchNodeResolverMapEntryResponse)(nil), "spire.server.datastore.FetchNodeResolverMapEntryResponse")
	proto.RegisterType((*DeleteNodeResolverMapEntryRequest)(nil), "spire.server.datastore.DeleteNodeResolverMapEntryRequest")
	proto.RegisterType((*DeleteNodeResolverMapEntryResponse)(nil), "spire.server.datastore.DeleteNodeResolverMapEntryResponse")
	proto.RegisterType((*RectifyNodeResolverMapEntriesRequest)(nil), "spire.server.datastore.RectifyNodeResolverMapEntriesRequest")
	proto.RegisterType((*RectifyNodeResolverMapEntriesResponse)(nil), "spire.server.datastore.RectifyNodeResolverMapEntriesResponse")
	proto.RegisterType((*CreateRegistrationEntryRequest)(nil), "spire.server.datastore.CreateRegistrationEntryRequest")
	proto.RegisterType((*CreateRegistrationEntryResponse)(nil), "spire.server.datastore.CreateRegistrationEntryResponse")
	proto.RegisterType((*FetchRegistrationEntryRequest)(nil), "spire.server.datastore.FetchRegistrationEntryRequest")
	proto.RegisterType((*FetchRegistrationEntryResponse)(nil), "spire.server.datastore.FetchRegistrationEntryResponse")
	proto.RegisterType((*FetchRegistrationEntriesResponse)(nil), "spire.server.datastore.FetchRegistrationEntriesResponse")
	proto.RegisterType((*UpdateRegistrationEntryRequest)(nil), "spire.server.datastore.UpdateRegistrationEntryRequest")
	proto.RegisterType((*UpdateRegistrationEntryResponse)(nil), "spire.server.datastore.UpdateRegistrationEntryResponse")
	proto.RegisterType((*DeleteRegistrationEntryRequest)(nil), "spire.server.datastore.DeleteRegistrationEntryRequest")
	proto.RegisterType((*DeleteRegistrationEntryResponse)(nil), "spire.server.datastore.DeleteRegistrationEntryResponse")
	proto.RegisterType((*ListParentIDEntriesRequest)(nil), "spire.server.datastore.ListParentIDEntriesRequest")
	proto.RegisterType((*ListParentIDEntriesResponse)(nil), "spire.server.datastore.ListParentIDEntriesResponse")
	proto.RegisterType((*ListSelectorEntriesRequest)(nil), "spire.server.datastore.ListSelectorEntriesRequest")
	proto.RegisterType((*ListSelectorEntriesResponse)(nil), "spire.server.datastore.ListSelectorEntriesResponse")
	proto.RegisterType((*ListSpiffeEntriesRequest)(nil), "spire.server.datastore.ListSpiffeEntriesRequest")
	proto.RegisterType((*ListSpiffeEntriesResponse)(nil), "spire.server.datastore.ListSpiffeEntriesResponse")
	proto.RegisterType((*JoinToken)(nil), "spire.server.datastore.JoinToken")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for DataStore service

type DataStoreClient interface {
	// Creates a Bundle
	CreateBundle(ctx context.Context, in *Bundle, opts ...grpc.CallOption) (*Bundle, error)
	// Updates the specified Bundle, overwriting existing certs
	UpdateBundle(ctx context.Context, in *Bundle, opts ...grpc.CallOption) (*Bundle, error)
	// Appends the provided certs onto an existing bundle, creating a new bundle if one doesn't exist
	AppendBundle(ctx context.Context, in *Bundle, opts ...grpc.CallOption) (*Bundle, error)
	// Deletes the specified Bundle
	DeleteBundle(ctx context.Context, in *Bundle, opts ...grpc.CallOption) (*Bundle, error)
	// Returns the specified Bundle
	FetchBundle(ctx context.Context, in *Bundle, opts ...grpc.CallOption) (*Bundle, error)
	// List all Bundles
	ListBundles(ctx context.Context, in *common.Empty, opts ...grpc.CallOption) (*Bundles, error)
	// Creates an Attested Node Entry
	CreateAttestedNodeEntry(ctx context.Context, in *CreateAttestedNodeEntryRequest, opts ...grpc.CallOption) (*CreateAttestedNodeEntryResponse, error)
	// Retrieves the Attested Node Entry
	FetchAttestedNodeEntry(ctx context.Context, in *FetchAttestedNodeEntryRequest, opts ...grpc.CallOption) (*FetchAttestedNodeEntryResponse, error)
	// Retrieves dead nodes for which the base SVID has expired
	FetchStaleNodeEntries(ctx context.Context, in *FetchStaleNodeEntriesRequest, opts ...grpc.CallOption) (*FetchStaleNodeEntriesResponse, error)
	// Updates the Attested Node Entry
	UpdateAttestedNodeEntry(ctx context.Context, in *UpdateAttestedNodeEntryRequest, opts ...grpc.CallOption) (*UpdateAttestedNodeEntryResponse, error)
	// Deletes the Attested Node Entry
	DeleteAttestedNodeEntry(ctx context.Context, in *DeleteAttestedNodeEntryRequest, opts ...grpc.CallOption) (*DeleteAttestedNodeEntryResponse, error)
	// Creates a Node resolver map Entry
	CreateNodeResolverMapEntry(ctx context.Context, in *CreateNodeResolverMapEntryRequest, opts ...grpc.CallOption) (*CreateNodeResolverMapEntryResponse, error)
	// Retrieves all Node Resolver Map Entry for the specific base SPIFFEID
	FetchNodeResolverMapEntry(ctx context.Context, in *FetchNodeResolverMapEntryRequest, opts ...grpc.CallOption) (*FetchNodeResolverMapEntryResponse, error)
	// Deletes all Node Resolver Map Entry for the specific base SPIFFEID
	DeleteNodeResolverMapEntry(ctx context.Context, in *DeleteNodeResolverMapEntryRequest, opts ...grpc.CallOption) (*DeleteNodeResolverMapEntryResponse, error)
	// Used for rectifying updated node resolutions
	RectifyNodeResolverMapEntries(ctx context.Context, in *RectifyNodeResolverMapEntriesRequest, opts ...grpc.CallOption) (*RectifyNodeResolverMapEntriesResponse, error)
	// Creates a Registered Entry
	CreateRegistrationEntry(ctx context.Context, in *CreateRegistrationEntryRequest, opts ...grpc.CallOption) (*CreateRegistrationEntryResponse, error)
	// Retrieve a specific registered entry
	FetchRegistrationEntry(ctx context.Context, in *FetchRegistrationEntryRequest, opts ...grpc.CallOption) (*FetchRegistrationEntryResponse, error)
	// Retrieve all registration entries
	FetchRegistrationEntries(ctx context.Context, in *common.Empty, opts ...grpc.CallOption) (*FetchRegistrationEntriesResponse, error)
	// Updates a specific registered entry
	UpdateRegistrationEntry(ctx context.Context, in *UpdateRegistrationEntryRequest, opts ...grpc.CallOption) (*UpdateRegistrationEntryResponse, error)
	// Deletes a specific registered entry
	DeleteRegistrationEntry(ctx context.Context, in *DeleteRegistrationEntryRequest, opts ...grpc.CallOption) (*DeleteRegistrationEntryResponse, error)
	// Retrieves all the registered entry with the same ParentID
	ListParentIDEntries(ctx context.Context, in *ListParentIDEntriesRequest, opts ...grpc.CallOption) (*ListParentIDEntriesResponse, error)
	// Retrieves all the registered entry matching exactly the compound Selector
	ListSelectorEntries(ctx context.Context, in *ListSelectorEntriesRequest, opts ...grpc.CallOption) (*ListSelectorEntriesResponse, error)
	// Retrieves registered entries containing all of the specified selectors
	ListMatchingEntries(ctx context.Context, in *ListSelectorEntriesRequest, opts ...grpc.CallOption) (*ListSelectorEntriesResponse, error)
	// Retrieves all the registered entry with the same SpiffeId
	ListSpiffeEntries(ctx context.Context, in *ListSpiffeEntriesRequest, opts ...grpc.CallOption) (*ListSpiffeEntriesResponse, error)
	// Register a new join token
	RegisterToken(ctx context.Context, in *JoinToken, opts ...grpc.CallOption) (*common.Empty, error)
	// Fetch a token record
	FetchToken(ctx context.Context, in *JoinToken, opts ...grpc.CallOption) (*JoinToken, error)
	// Delete the referenced token
	DeleteToken(ctx context.Context, in *JoinToken, opts ...grpc.CallOption) (*common.Empty, error)
	// Delete all tokens with expiry less than the one specified
	PruneTokens(ctx context.Context, in *JoinToken, opts ...grpc.CallOption) (*common.Empty, error)
	// Applies the plugin configuration
	Configure(ctx context.Context, in *plugin.ConfigureRequest, opts ...grpc.CallOption) (*plugin.ConfigureResponse, error)
	// Returns the version and related metadata of the installed plugin
	GetPluginInfo(ctx context.Context, in *plugin.GetPluginInfoRequest, opts ...grpc.CallOption) (*plugin.GetPluginInfoResponse, error)
}

type dataStoreClient struct {
	cc *grpc.ClientConn
}

func NewDataStoreClient(cc *grpc.ClientConn) DataStoreClient {
	return &dataStoreClient{cc}
}

func (c *dataStoreClient) CreateBundle(ctx context.Context, in *Bundle, opts ...grpc.CallOption) (*Bundle, error) {
	out := new(Bundle)
	err := grpc.Invoke(ctx, "/spire.server.datastore.DataStore/CreateBundle", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataStoreClient) UpdateBundle(ctx context.Context, in *Bundle, opts ...grpc.CallOption) (*Bundle, error) {
	out := new(Bundle)
	err := grpc.Invoke(ctx, "/spire.server.datastore.DataStore/UpdateBundle", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataStoreClient) AppendBundle(ctx context.Context, in *Bundle, opts ...grpc.CallOption) (*Bundle, error) {
	out := new(Bundle)
	err := grpc.Invoke(ctx, "/spire.server.datastore.DataStore/AppendBundle", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataStoreClient) DeleteBundle(ctx context.Context, in *Bundle, opts ...grpc.CallOption) (*Bundle, error) {
	out := new(Bundle)
	err := grpc.Invoke(ctx, "/spire.server.datastore.DataStore/DeleteBundle", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataStoreClient) FetchBundle(ctx context.Context, in *Bundle, opts ...grpc.CallOption) (*Bundle, error) {
	out := new(Bundle)
	err := grpc.Invoke(ctx, "/spire.server.datastore.DataStore/FetchBundle", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataStoreClient) ListBundles(ctx context.Context, in *common.Empty, opts ...grpc.CallOption) (*Bundles, error) {
	out := new(Bundles)
	err := grpc.Invoke(ctx, "/spire.server.datastore.DataStore/ListBundles", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataStoreClient) CreateAttestedNodeEntry(ctx context.Context, in *CreateAttestedNodeEntryRequest, opts ...grpc.CallOption) (*CreateAttestedNodeEntryResponse, error) {
	out := new(CreateAttestedNodeEntryResponse)
	err := grpc.Invoke(ctx, "/spire.server.datastore.DataStore/CreateAttestedNodeEntry", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataStoreClient) FetchAttestedNodeEntry(ctx context.Context, in *FetchAttestedNodeEntryRequest, opts ...grpc.CallOption) (*FetchAttestedNodeEntryResponse, error) {
	out := new(FetchAttestedNodeEntryResponse)
	err := grpc.Invoke(ctx, "/spire.server.datastore.DataStore/FetchAttestedNodeEntry", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataStoreClient) FetchStaleNodeEntries(ctx context.Context, in *FetchStaleNodeEntriesRequest, opts ...grpc.CallOption) (*FetchStaleNodeEntriesResponse, error) {
	out := new(FetchStaleNodeEntriesResponse)
	err := grpc.Invoke(ctx, "/spire.server.datastore.DataStore/FetchStaleNodeEntries", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataStoreClient) UpdateAttestedNodeEntry(ctx context.Context, in *UpdateAttestedNodeEntryRequest, opts ...grpc.CallOption) (*UpdateAttestedNodeEntryResponse, error) {
	out := new(UpdateAttestedNodeEntryResponse)
	err := grpc.Invoke(ctx, "/spire.server.datastore.DataStore/UpdateAttestedNodeEntry", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataStoreClient) DeleteAttestedNodeEntry(ctx context.Context, in *DeleteAttestedNodeEntryRequest, opts ...grpc.CallOption) (*DeleteAttestedNodeEntryResponse, error) {
	out := new(DeleteAttestedNodeEntryResponse)
	err := grpc.Invoke(ctx, "/spire.server.datastore.DataStore/DeleteAttestedNodeEntry", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataStoreClient) CreateNodeResolverMapEntry(ctx context.Context, in *CreateNodeResolverMapEntryRequest, opts ...grpc.CallOption) (*CreateNodeResolverMapEntryResponse, error) {
	out := new(CreateNodeResolverMapEntryResponse)
	err := grpc.Invoke(ctx, "/spire.server.datastore.DataStore/CreateNodeResolverMapEntry", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataStoreClient) FetchNodeResolverMapEntry(ctx context.Context, in *FetchNodeResolverMapEntryRequest, opts ...grpc.CallOption) (*FetchNodeResolverMapEntryResponse, error) {
	out := new(FetchNodeResolverMapEntryResponse)
	err := grpc.Invoke(ctx, "/spire.server.datastore.DataStore/FetchNodeResolverMapEntry", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataStoreClient) DeleteNodeResolverMapEntry(ctx context.Context, in *DeleteNodeResolverMapEntryRequest, opts ...grpc.CallOption) (*DeleteNodeResolverMapEntryResponse, error) {
	out := new(DeleteNodeResolverMapEntryResponse)
	err := grpc.Invoke(ctx, "/spire.server.datastore.DataStore/DeleteNodeResolverMapEntry", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataStoreClient) RectifyNodeResolverMapEntries(ctx context.Context, in *RectifyNodeResolverMapEntriesRequest, opts ...grpc.CallOption) (*RectifyNodeResolverMapEntriesResponse, error) {
	out := new(RectifyNodeResolverMapEntriesResponse)
	err := grpc.Invoke(ctx, "/spire.server.datastore.DataStore/RectifyNodeResolverMapEntries", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataStoreClient) CreateRegistrationEntry(ctx context.Context, in *CreateRegistrationEntryRequest, opts ...grpc.CallOption) (*CreateRegistrationEntryResponse, error) {
	out := new(CreateRegistrationEntryResponse)
	err := grpc.Invoke(ctx, "/spire.server.datastore.DataStore/CreateRegistrationEntry", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataStoreClient) FetchRegistrationEntry(ctx context.Context, in *FetchRegistrationEntryRequest, opts ...grpc.CallOption) (*FetchRegistrationEntryResponse, error) {
	out := new(FetchRegistrationEntryResponse)
	err := grpc.Invoke(ctx, "/spire.server.datastore.DataStore/FetchRegistrationEntry", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataStoreClient) FetchRegistrationEntries(ctx context.Context, in *common.Empty, opts ...grpc.CallOption) (*FetchRegistrationEntriesResponse, error) {
	out := new(FetchRegistrationEntriesResponse)
	err := grpc.Invoke(ctx, "/spire.server.datastore.DataStore/FetchRegistrationEntries", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataStoreClient) UpdateRegistrationEntry(ctx context.Context, in *UpdateRegistrationEntryRequest, opts ...grpc.CallOption) (*UpdateRegistrationEntryResponse, error) {
	out := new(UpdateRegistrationEntryResponse)
	err := grpc.Invoke(ctx, "/spire.server.datastore.DataStore/UpdateRegistrationEntry", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataStoreClient) DeleteRegistrationEntry(ctx context.Context, in *DeleteRegistrationEntryRequest, opts ...grpc.CallOption) (*DeleteRegistrationEntryResponse, error) {
	out := new(DeleteRegistrationEntryResponse)
	err := grpc.Invoke(ctx, "/spire.server.datastore.DataStore/DeleteRegistrationEntry", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataStoreClient) ListParentIDEntries(ctx context.Context, in *ListParentIDEntriesRequest, opts ...grpc.CallOption) (*ListParentIDEntriesResponse, error) {
	out := new(ListParentIDEntriesResponse)
	err := grpc.Invoke(ctx, "/spire.server.datastore.DataStore/ListParentIDEntries", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataStoreClient) ListSelectorEntries(ctx context.Context, in *ListSelectorEntriesRequest, opts ...grpc.CallOption) (*ListSelectorEntriesResponse, error) {
	out := new(ListSelectorEntriesResponse)
	err := grpc.Invoke(ctx, "/spire.server.datastore.DataStore/ListSelectorEntries", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataStoreClient) ListMatchingEntries(ctx context.Context, in *ListSelectorEntriesRequest, opts ...grpc.CallOption) (*ListSelectorEntriesResponse, error) {
	out := new(ListSelectorEntriesResponse)
	err := grpc.Invoke(ctx, "/spire.server.datastore.DataStore/ListMatchingEntries", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataStoreClient) ListSpiffeEntries(ctx context.Context, in *ListSpiffeEntriesRequest, opts ...grpc.CallOption) (*ListSpiffeEntriesResponse, error) {
	out := new(ListSpiffeEntriesResponse)
	err := grpc.Invoke(ctx, "/spire.server.datastore.DataStore/ListSpiffeEntries", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataStoreClient) RegisterToken(ctx context.Context, in *JoinToken, opts ...grpc.CallOption) (*common.Empty, error) {
	out := new(common.Empty)
	err := grpc.Invoke(ctx, "/spire.server.datastore.DataStore/RegisterToken", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataStoreClient) FetchToken(ctx context.Context, in *JoinToken, opts ...grpc.CallOption) (*JoinToken, error) {
	out := new(JoinToken)
	err := grpc.Invoke(ctx, "/spire.server.datastore.DataStore/FetchToken", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataStoreClient) DeleteToken(ctx context.Context, in *JoinToken, opts ...grpc.CallOption) (*common.Empty, error) {
	out := new(common.Empty)
	err := grpc.Invoke(ctx, "/spire.server.datastore.DataStore/DeleteToken", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataStoreClient) PruneTokens(ctx context.Context, in *JoinToken, opts ...grpc.CallOption) (*common.Empty, error) {
	out := new(common.Empty)
	err := grpc.Invoke(ctx, "/spire.server.datastore.DataStore/PruneTokens", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataStoreClient) Configure(ctx context.Context, in *plugin.ConfigureRequest, opts ...grpc.CallOption) (*plugin.ConfigureResponse, error) {
	out := new(plugin.ConfigureResponse)
	err := grpc.Invoke(ctx, "/spire.server.datastore.DataStore/Configure", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataStoreClient) GetPluginInfo(ctx context.Context, in *plugin.GetPluginInfoRequest, opts ...grpc.CallOption) (*plugin.GetPluginInfoResponse, error) {
	out := new(plugin.GetPluginInfoResponse)
	err := grpc.Invoke(ctx, "/spire.server.datastore.DataStore/GetPluginInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for DataStore service

type DataStoreServer interface {
	// Creates a Bundle
	CreateBundle(context.Context, *Bundle) (*Bundle, error)
	// Updates the specified Bundle, overwriting existing certs
	UpdateBundle(context.Context, *Bundle) (*Bundle, error)
	// Appends the provided certs onto an existing bundle, creating a new bundle if one doesn't exist
	AppendBundle(context.Context, *Bundle) (*Bundle, error)
	// Deletes the specified Bundle
	DeleteBundle(context.Context, *Bundle) (*Bundle, error)
	// Returns the specified Bundle
	FetchBundle(context.Context, *Bundle) (*Bundle, error)
	// List all Bundles
	ListBundles(context.Context, *common.Empty) (*Bundles, error)
	// Creates an Attested Node Entry
	CreateAttestedNodeEntry(context.Context, *CreateAttestedNodeEntryRequest) (*CreateAttestedNodeEntryResponse, error)
	// Retrieves the Attested Node Entry
	FetchAttestedNodeEntry(context.Context, *FetchAttestedNodeEntryRequest) (*FetchAttestedNodeEntryResponse, error)
	// Retrieves dead nodes for which the base SVID has expired
	FetchStaleNodeEntries(context.Context, *FetchStaleNodeEntriesRequest) (*FetchStaleNodeEntriesResponse, error)
	// Updates the Attested Node Entry
	UpdateAttestedNodeEntry(context.Context, *UpdateAttestedNodeEntryRequest) (*UpdateAttestedNodeEntryResponse, error)
	// Deletes the Attested Node Entry
	DeleteAttestedNodeEntry(context.Context, *DeleteAttestedNodeEntryRequest) (*DeleteAttestedNodeEntryResponse, error)
	// Creates a Node resolver map Entry
	CreateNodeResolverMapEntry(context.Context, *CreateNodeResolverMapEntryRequest) (*CreateNodeResolverMapEntryResponse, error)
	// Retrieves all Node Resolver Map Entry for the specific base SPIFFEID
	FetchNodeResolverMapEntry(context.Context, *FetchNodeResolverMapEntryRequest) (*FetchNodeResolverMapEntryResponse, error)
	// Deletes all Node Resolver Map Entry for the specific base SPIFFEID
	DeleteNodeResolverMapEntry(context.Context, *DeleteNodeResolverMapEntryRequest) (*DeleteNodeResolverMapEntryResponse, error)
	// Used for rectifying updated node resolutions
	RectifyNodeResolverMapEntries(context.Context, *RectifyNodeResolverMapEntriesRequest) (*RectifyNodeResolverMapEntriesResponse, error)
	// Creates a Registered Entry
	CreateRegistrationEntry(context.Context, *CreateRegistrationEntryRequest) (*CreateRegistrationEntryResponse, error)
	// Retrieve a specific registered entry
	FetchRegistrationEntry(context.Context, *FetchRegistrationEntryRequest) (*FetchRegistrationEntryResponse, error)
	// Retrieve all registration entries
	FetchRegistrationEntries(context.Context, *common.Empty) (*FetchRegistrationEntriesResponse, error)
	// Updates a specific registered entry
	UpdateRegistrationEntry(context.Context, *UpdateRegistrationEntryRequest) (*UpdateRegistrationEntryResponse, error)
	// Deletes a specific registered entry
	DeleteRegistrationEntry(context.Context, *DeleteRegistrationEntryRequest) (*DeleteRegistrationEntryResponse, error)
	// Retrieves all the registered entry with the same ParentID
	ListParentIDEntries(context.Context, *ListParentIDEntriesRequest) (*ListParentIDEntriesResponse, error)
	// Retrieves all the registered entry matching exactly the compound Selector
	ListSelectorEntries(context.Context, *ListSelectorEntriesRequest) (*ListSelectorEntriesResponse, error)
	// Retrieves registered entries containing all of the specified selectors
	ListMatchingEntries(context.Context, *ListSelectorEntriesRequest) (*ListSelectorEntriesResponse, error)
	// Retrieves all the registered entry with the same SpiffeId
	ListSpiffeEntries(context.Context, *ListSpiffeEntriesRequest) (*ListSpiffeEntriesResponse, error)
	// Register a new join token
	RegisterToken(context.Context, *JoinToken) (*common.Empty, error)
	// Fetch a token record
	FetchToken(context.Context, *JoinToken) (*JoinToken, error)
	// Delete the referenced token
	DeleteToken(context.Context, *JoinToken) (*common.Empty, error)
	// Delete all tokens with expiry less than the one specified
	PruneTokens(context.Context, *JoinToken) (*common.Empty, error)
	// Applies the plugin configuration
	Configure(context.Context, *plugin.ConfigureRequest) (*plugin.ConfigureResponse, error)
	// Returns the version and related metadata of the installed plugin
	GetPluginInfo(context.Context, *plugin.GetPluginInfoRequest) (*plugin.GetPluginInfoResponse, error)
}

func RegisterDataStoreServer(s *grpc.Server, srv DataStoreServer) {
	s.RegisterService(&_DataStore_serviceDesc, srv)
}

func _DataStore_CreateBundle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Bundle)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataStoreServer).CreateBundle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spire.server.datastore.DataStore/CreateBundle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataStoreServer).CreateBundle(ctx, req.(*Bundle))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataStore_UpdateBundle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Bundle)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataStoreServer).UpdateBundle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spire.server.datastore.DataStore/UpdateBundle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataStoreServer).UpdateBundle(ctx, req.(*Bundle))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataStore_AppendBundle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Bundle)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataStoreServer).AppendBundle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spire.server.datastore.DataStore/AppendBundle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataStoreServer).AppendBundle(ctx, req.(*Bundle))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataStore_DeleteBundle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Bundle)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataStoreServer).DeleteBundle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spire.server.datastore.DataStore/DeleteBundle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataStoreServer).DeleteBundle(ctx, req.(*Bundle))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataStore_FetchBundle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Bundle)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataStoreServer).FetchBundle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spire.server.datastore.DataStore/FetchBundle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataStoreServer).FetchBundle(ctx, req.(*Bundle))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataStore_ListBundles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataStoreServer).ListBundles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spire.server.datastore.DataStore/ListBundles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataStoreServer).ListBundles(ctx, req.(*common.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataStore_CreateAttestedNodeEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAttestedNodeEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataStoreServer).CreateAttestedNodeEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spire.server.datastore.DataStore/CreateAttestedNodeEntry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataStoreServer).CreateAttestedNodeEntry(ctx, req.(*CreateAttestedNodeEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataStore_FetchAttestedNodeEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchAttestedNodeEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataStoreServer).FetchAttestedNodeEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spire.server.datastore.DataStore/FetchAttestedNodeEntry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataStoreServer).FetchAttestedNodeEntry(ctx, req.(*FetchAttestedNodeEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataStore_FetchStaleNodeEntries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchStaleNodeEntriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataStoreServer).FetchStaleNodeEntries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spire.server.datastore.DataStore/FetchStaleNodeEntries",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataStoreServer).FetchStaleNodeEntries(ctx, req.(*FetchStaleNodeEntriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataStore_UpdateAttestedNodeEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAttestedNodeEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataStoreServer).UpdateAttestedNodeEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spire.server.datastore.DataStore/UpdateAttestedNodeEntry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataStoreServer).UpdateAttestedNodeEntry(ctx, req.(*UpdateAttestedNodeEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataStore_DeleteAttestedNodeEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAttestedNodeEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataStoreServer).DeleteAttestedNodeEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spire.server.datastore.DataStore/DeleteAttestedNodeEntry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataStoreServer).DeleteAttestedNodeEntry(ctx, req.(*DeleteAttestedNodeEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataStore_CreateNodeResolverMapEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNodeResolverMapEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataStoreServer).CreateNodeResolverMapEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spire.server.datastore.DataStore/CreateNodeResolverMapEntry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataStoreServer).CreateNodeResolverMapEntry(ctx, req.(*CreateNodeResolverMapEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataStore_FetchNodeResolverMapEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchNodeResolverMapEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataStoreServer).FetchNodeResolverMapEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spire.server.datastore.DataStore/FetchNodeResolverMapEntry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataStoreServer).FetchNodeResolverMapEntry(ctx, req.(*FetchNodeResolverMapEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataStore_DeleteNodeResolverMapEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteNodeResolverMapEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataStoreServer).DeleteNodeResolverMapEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spire.server.datastore.DataStore/DeleteNodeResolverMapEntry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataStoreServer).DeleteNodeResolverMapEntry(ctx, req.(*DeleteNodeResolverMapEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataStore_RectifyNodeResolverMapEntries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RectifyNodeResolverMapEntriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataStoreServer).RectifyNodeResolverMapEntries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spire.server.datastore.DataStore/RectifyNodeResolverMapEntries",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataStoreServer).RectifyNodeResolverMapEntries(ctx, req.(*RectifyNodeResolverMapEntriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataStore_CreateRegistrationEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRegistrationEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataStoreServer).CreateRegistrationEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spire.server.datastore.DataStore/CreateRegistrationEntry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataStoreServer).CreateRegistrationEntry(ctx, req.(*CreateRegistrationEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataStore_FetchRegistrationEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchRegistrationEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataStoreServer).FetchRegistrationEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spire.server.datastore.DataStore/FetchRegistrationEntry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataStoreServer).FetchRegistrationEntry(ctx, req.(*FetchRegistrationEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataStore_FetchRegistrationEntries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataStoreServer).FetchRegistrationEntries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spire.server.datastore.DataStore/FetchRegistrationEntries",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataStoreServer).FetchRegistrationEntries(ctx, req.(*common.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataStore_UpdateRegistrationEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRegistrationEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataStoreServer).UpdateRegistrationEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spire.server.datastore.DataStore/UpdateRegistrationEntry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataStoreServer).UpdateRegistrationEntry(ctx, req.(*UpdateRegistrationEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataStore_DeleteRegistrationEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRegistrationEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataStoreServer).DeleteRegistrationEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spire.server.datastore.DataStore/DeleteRegistrationEntry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataStoreServer).DeleteRegistrationEntry(ctx, req.(*DeleteRegistrationEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataStore_ListParentIDEntries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListParentIDEntriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataStoreServer).ListParentIDEntries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spire.server.datastore.DataStore/ListParentIDEntries",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataStoreServer).ListParentIDEntries(ctx, req.(*ListParentIDEntriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataStore_ListSelectorEntries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSelectorEntriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataStoreServer).ListSelectorEntries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spire.server.datastore.DataStore/ListSelectorEntries",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataStoreServer).ListSelectorEntries(ctx, req.(*ListSelectorEntriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataStore_ListMatchingEntries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSelectorEntriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataStoreServer).ListMatchingEntries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spire.server.datastore.DataStore/ListMatchingEntries",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataStoreServer).ListMatchingEntries(ctx, req.(*ListSelectorEntriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataStore_ListSpiffeEntries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSpiffeEntriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataStoreServer).ListSpiffeEntries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spire.server.datastore.DataStore/ListSpiffeEntries",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataStoreServer).ListSpiffeEntries(ctx, req.(*ListSpiffeEntriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataStore_RegisterToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinToken)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataStoreServer).RegisterToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spire.server.datastore.DataStore/RegisterToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataStoreServer).RegisterToken(ctx, req.(*JoinToken))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataStore_FetchToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinToken)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataStoreServer).FetchToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spire.server.datastore.DataStore/FetchToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataStoreServer).FetchToken(ctx, req.(*JoinToken))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataStore_DeleteToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinToken)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataStoreServer).DeleteToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spire.server.datastore.DataStore/DeleteToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataStoreServer).DeleteToken(ctx, req.(*JoinToken))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataStore_PruneTokens_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinToken)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataStoreServer).PruneTokens(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spire.server.datastore.DataStore/PruneTokens",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataStoreServer).PruneTokens(ctx, req.(*JoinToken))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataStore_Configure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(plugin.ConfigureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataStoreServer).Configure(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spire.server.datastore.DataStore/Configure",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataStoreServer).Configure(ctx, req.(*plugin.ConfigureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataStore_GetPluginInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(plugin.GetPluginInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataStoreServer).GetPluginInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spire.server.datastore.DataStore/GetPluginInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataStoreServer).GetPluginInfo(ctx, req.(*plugin.GetPluginInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _DataStore_serviceDesc = grpc.ServiceDesc{
	ServiceName: "spire.server.datastore.DataStore",
	HandlerType: (*DataStoreServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateBundle",
			Handler:    _DataStore_CreateBundle_Handler,
		},
		{
			MethodName: "UpdateBundle",
			Handler:    _DataStore_UpdateBundle_Handler,
		},
		{
			MethodName: "AppendBundle",
			Handler:    _DataStore_AppendBundle_Handler,
		},
		{
			MethodName: "DeleteBundle",
			Handler:    _DataStore_DeleteBundle_Handler,
		},
		{
			MethodName: "FetchBundle",
			Handler:    _DataStore_FetchBundle_Handler,
		},
		{
			MethodName: "ListBundles",
			Handler:    _DataStore_ListBundles_Handler,
		},
		{
			MethodName: "CreateAttestedNodeEntry",
			Handler:    _DataStore_CreateAttestedNodeEntry_Handler,
		},
		{
			MethodName: "FetchAttestedNodeEntry",
			Handler:    _DataStore_FetchAttestedNodeEntry_Handler,
		},
		{
			MethodName: "FetchStaleNodeEntries",
			Handler:    _DataStore_FetchStaleNodeEntries_Handler,
		},
		{
			MethodName: "UpdateAttestedNodeEntry",
			Handler:    _DataStore_UpdateAttestedNodeEntry_Handler,
		},
		{
			MethodName: "DeleteAttestedNodeEntry",
			Handler:    _DataStore_DeleteAttestedNodeEntry_Handler,
		},
		{
			MethodName: "CreateNodeResolverMapEntry",
			Handler:    _DataStore_CreateNodeResolverMapEntry_Handler,
		},
		{
			MethodName: "FetchNodeResolverMapEntry",
			Handler:    _DataStore_FetchNodeResolverMapEntry_Handler,
		},
		{
			MethodName: "DeleteNodeResolverMapEntry",
			Handler:    _DataStore_DeleteNodeResolverMapEntry_Handler,
		},
		{
			MethodName: "RectifyNodeResolverMapEntries",
			Handler:    _DataStore_RectifyNodeResolverMapEntries_Handler,
		},
		{
			MethodName: "CreateRegistrationEntry",
			Handler:    _DataStore_CreateRegistrationEntry_Handler,
		},
		{
			MethodName: "FetchRegistrationEntry",
			Handler:    _DataStore_FetchRegistrationEntry_Handler,
		},
		{
			MethodName: "FetchRegistrationEntries",
			Handler:    _DataStore_FetchRegistrationEntries_Handler,
		},
		{
			MethodName: "UpdateRegistrationEntry",
			Handler:    _DataStore_UpdateRegistrationEntry_Handler,
		},
		{
			MethodName: "DeleteRegistrationEntry",
			Handler:    _DataStore_DeleteRegistrationEntry_Handler,
		},
		{
			MethodName: "ListParentIDEntries",
			Handler:    _DataStore_ListParentIDEntries_Handler,
		},
		{
			MethodName: "ListSelectorEntries",
			Handler:    _DataStore_ListSelectorEntries_Handler,
		},
		{
			MethodName: "ListMatchingEntries",
			Handler:    _DataStore_ListMatchingEntries_Handler,
		},
		{
			MethodName: "ListSpiffeEntries",
			Handler:    _DataStore_ListSpiffeEntries_Handler,
		},
		{
			MethodName: "RegisterToken",
			Handler:    _DataStore_RegisterToken_Handler,
		},
		{
			MethodName: "FetchToken",
			Handler:    _DataStore_FetchToken_Handler,
		},
		{
			MethodName: "DeleteToken",
			Handler:    _DataStore_DeleteToken_Handler,
		},
		{
			MethodName: "PruneTokens",
			Handler:    _DataStore_PruneTokens_Handler,
		},
		{
			MethodName: "Configure",
			Handler:    _DataStore_Configure_Handler,
		},
		{
			MethodName: "GetPluginInfo",
			Handler:    _DataStore_GetPluginInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "datastore.proto",
}

func init() { proto.RegisterFile("datastore.proto", fileDescriptor_datastore_396395c57dd52724) }

var fileDescriptor_datastore_396395c57dd52724 = []byte{
	// 1327 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x59, 0xcf, 0x6f, 0x1b, 0x45,
	0x14, 0x66, 0x1b, 0x48, 0xe2, 0xe7, 0x54, 0x25, 0x93, 0x34, 0x38, 0x0b, 0xcd, 0x8f, 0x15, 0x45,
	0x69, 0x55, 0x39, 0xad, 0xdb, 0x86, 0x04, 0xc1, 0xa1, 0x75, 0x92, 0x2a, 0x88, 0xa4, 0x61, 0x53,
	0x84, 0xd4, 0x4b, 0xd8, 0xd8, 0xe3, 0x64, 0x15, 0x7b, 0x77, 0xd9, 0x19, 0x57, 0x4d, 0x0f, 0x88,
	0x03, 0x3f, 0x24, 0x24, 0x50, 0x11, 0x27, 0x24, 0x0e, 0xfc, 0x33, 0xfc, 0x53, 0x9c, 0xd0, 0xce,
	0xcc, 0x6e, 0x6c, 0xef, 0xcc, 0xac, 0xd7, 0xb5, 0xcd, 0x29, 0xd9, 0x9d, 0x79, 0xdf, 0xfb, 0xde,
	0x9b, 0x99, 0x37, 0xef, 0x5b, 0xc3, 0xb5, 0xba, 0x43, 0x1d, 0x42, 0xfd, 0x10, 0x97, 0x83, 0xd0,
	0xa7, 0x3e, 0x5a, 0x20, 0x81, 0x1b, 0xe2, 0x32, 0xc1, 0xe1, 0x0b, 0x1c, 0x96, 0x93, 0x51, 0x73,
	0xf3, 0xd4, 0xa5, 0x67, 0xed, 0x93, 0x72, 0xcd, 0x6f, 0xad, 0x93, 0xc0, 0x6d, 0x34, 0xf0, 0x3a,
	0x9b, 0xb9, 0xce, 0xcc, 0xd6, 0x6b, 0x7e, 0xab, 0xe5, 0x7b, 0xeb, 0x41, 0xb3, 0x7d, 0xea, 0xc6,
	0x7f, 0x38, 0xa2, 0x79, 0xaf, 0x2f, 0x4b, 0xfe, 0x87, 0x9b, 0x58, 0xbb, 0x30, 0xf9, 0xb8, 0xed,
	0xd5, 0x9b, 0x18, 0xad, 0xc2, 0x0c, 0x0d, 0xdb, 0x84, 0x1e, 0xd7, 0xfd, 0x96, 0xe3, 0x7a, 0x25,
	0x63, 0xc5, 0x58, 0x2b, 0xd8, 0x45, 0xf6, 0x6e, 0x9b, 0xbd, 0x42, 0x8b, 0x30, 0x5d, 0x73, 0x8e,
	0x6b, 0x38, 0xa4, 0xa4, 0x74, 0x65, 0xc5, 0x58, 0x9b, 0xb1, 0xa7, 0x6a, 0x4e, 0x35, 0x7a, 0xb4,
	0xaa, 0x30, 0xc5, 0x71, 0x08, 0xda, 0x84, 0xa9, 0x13, 0xfe, 0x6f, 0xc9, 0x58, 0x99, 0x58, 0x2b,
	0x56, 0x96, 0xca, 0xf2, 0x48, 0xcb, 0xdc, 0xc2, 0x8e, 0xa7, 0x5b, 0x1e, 0xcc, 0x1f, 0xf8, 0x75,
	0x6c, 0x63, 0xe2, 0x37, 0x5f, 0xe0, 0x70, 0xdf, 0x09, 0x76, 0x3c, 0x1a, 0x5e, 0x20, 0x0b, 0x66,
	0x4e, 0x1c, 0x82, 0x8f, 0x58, 0x48, 0x7b, 0x75, 0x41, 0xad, 0xeb, 0x1d, 0xaa, 0xc0, 0x34, 0xc1,
	0x4d, 0x5c, 0xa3, 0x7e, 0xc8, 0xb8, 0x15, 0x2b, 0x0b, 0xc2, 0xad, 0x88, 0xf7, 0x48, 0x8c, 0xda,
	0xc9, 0x3c, 0xeb, 0x1f, 0x03, 0x66, 0x1f, 0x51, 0x8a, 0x09, 0xc5, 0xf5, 0xc8, 0x71, 0xff, 0xde,
	0xee, 0xc2, 0x9c, 0xc3, 0x0c, 0x1d, 0xea, 0xfa, 0xde, 0xb6, 0x43, 0x9d, 0x67, 0x17, 0x01, 0x66,
	0x8e, 0x0b, 0xb6, 0x6c, 0x08, 0xdd, 0x86, 0x77, 0xa3, 0xc4, 0x1d, 0xe1, 0xd0, 0x75, 0x9a, 0x07,
	0xed, 0xd6, 0x09, 0x0e, 0x4b, 0x13, 0x6c, 0x7a, 0xea, 0x3d, 0x2a, 0x03, 0x8a, 0xde, 0xed, 0xbc,
	0x0c, 0xdc, 0x30, 0x46, 0xc1, 0xa5, 0xb7, 0xd9, 0x6c, 0xc9, 0x88, 0x75, 0x01, 0x4b, 0xd5, 0x10,
	0x3b, 0x14, 0xa7, 0x82, 0xb1, 0xf1, 0xb7, 0x6d, 0x4c, 0x28, 0xfa, 0x1a, 0x66, 0x9d, 0xde, 0x31,
	0x16, 0x58, 0xb1, 0x72, 0x4b, 0xb5, 0x3a, 0x69, 0xb0, 0x34, 0x86, 0xf5, 0x0a, 0x96, 0x95, 0xae,
	0x49, 0xe0, 0x7b, 0x04, 0x8f, 0xce, 0x77, 0x15, 0x6e, 0xec, 0x62, 0x5a, 0x3b, 0x53, 0x46, 0xdd,
	0xc7, 0x4a, 0x46, 0xb9, 0x53, 0x81, 0x8c, 0x9a, 0xff, 0x12, 0x7c, 0xc0, 0x5c, 0x1f, 0x51, 0xa7,
	0x89, 0xe3, 0xd7, 0x2e, 0x26, 0x82, 0xbe, 0xf5, 0xbd, 0x21, 0x02, 0x4c, 0x4f, 0x10, 0xd4, 0x8e,
	0xe1, 0x7a, 0x0a, 0xf6, 0x0b, 0x97, 0x50, 0x71, 0xf0, 0x72, 0xd0, 0x93, 0xe3, 0x58, 0x7f, 0x1b,
	0xb0, 0xf4, 0x55, 0x50, 0xd7, 0x6d, 0xad, 0x7e, 0x8e, 0x8b, 0x6c, 0xf3, 0x5f, 0xc9, 0xb5, 0xf9,
	0x27, 0x94, 0x9b, 0xff, 0x15, 0x2c, 0x2b, 0x19, 0x8e, 0x7a, 0x05, 0xb7, 0x61, 0x69, 0x1b, 0x37,
	0xf1, 0x9b, 0x65, 0x27, 0x8a, 0x40, 0x89, 0x32, 0xea, 0x08, 0x7e, 0x34, 0x60, 0x95, 0x1f, 0x60,
	0x59, 0xe5, 0x8d, 0xa3, 0xf8, 0x06, 0xe6, 0x3d, 0xc9, 0xb0, 0x60, 0x70, 0x47, 0xc5, 0x40, 0x0a,
	0x29, 0x45, 0xb2, 0x7e, 0x32, 0xc0, 0xd2, 0xf1, 0x10, 0x79, 0x18, 0x3d, 0x91, 0x5d, 0x58, 0x61,
	0x67, 0x4e, 0x97, 0x8e, 0x7e, 0x16, 0xf5, 0x57, 0x03, 0x56, 0x35, 0x40, 0x22, 0x9e, 0x33, 0x28,
	0xc9, 0x58, 0x74, 0x9c, 0xe1, 0x7c, 0x31, 0x29, 0xd1, 0xd8, 0x42, 0xf3, 0x5d, 0xf6, 0xff, 0x2e,
	0xf4, 0x6f, 0x06, 0x58, 0x3a, 0x1e, 0x63, 0x4f, 0xcc, 0x6b, 0x03, 0x3e, 0xb4, 0x71, 0x8d, 0xba,
	0x8d, 0x0b, 0x89, 0xe5, 0x65, 0x39, 0x1e, 0x23, 0xa5, 0xdf, 0x0d, 0xb8, 0x99, 0x41, 0x69, 0xec,
	0x69, 0x3a, 0x8f, 0x7b, 0x0c, 0x1b, 0x9f, 0xba, 0x84, 0xf2, 0x02, 0xdc, 0xb5, 0x77, 0xf6, 0xe0,
	0x5a, 0xc8, 0xc6, 0x70, 0x88, 0xeb, 0x9d, 0xdb, 0x66, 0xb9, 0xbb, 0x11, 0x4b, 0x03, 0xf4, 0xda,
	0x59, 0x4f, 0xe3, 0xae, 0x42, 0xe2, 0x4c, 0x44, 0x7e, 0x07, 0x66, 0x7b, 0xac, 0x92, 0x83, 0x98,
	0x1e, 0xb0, 0xf6, 0xc5, 0x4d, 0xaa, 0x24, 0x9f, 0x0f, 0xee, 0x5c, 0x34, 0x0d, 0x6a, 0x7a, 0x43,
	0x4c, 0x06, 0x11, 0x15, 0xa9, 0x77, 0x6a, 0xe7, 0x3e, 0x78, 0xda, 0x4b, 0xdf, 0x65, 0xdd, 0x77,
	0xe4, 0x70, 0x55, 0xef, 0x30, 0x42, 0x49, 0xdb, 0x5a, 0x7f, 0x26, 0x17, 0xff, 0x70, 0x52, 0x26,
	0x4b, 0xc8, 0x95, 0x01, 0x13, 0xd2, 0x8c, 0x6f, 0xfc, 0xb1, 0xa4, 0xff, 0x20, 0xbe, 0xe3, 0x87,
	0xb4, 0x77, 0x9a, 0xf1, 0x6d, 0x3f, 0x16, 0xf6, 0x9b, 0x60, 0x46, 0xc7, 0xf7, 0xd0, 0x09, 0xb1,
	0x47, 0xf7, 0xb6, 0x7b, 0x4a, 0x9a, 0x09, 0xd3, 0x01, 0x1f, 0x89, 0x09, 0x27, 0xcf, 0x56, 0x00,
	0xef, 0x4b, 0x2d, 0x05, 0xc7, 0x2f, 0x61, 0xae, 0xc7, 0x57, 0x47, 0xd1, 0xc9, 0xe4, 0x29, 0xb3,
	0xb5, 0x6c, 0xce, 0x35, 0x16, 0x6a, 0x3d, 0x5c, 0x1f, 0x40, 0x21, 0x16, 0x6e, 0xb1, 0xb0, 0x54,
	0x29, 0xbc, 0xcb, 0x89, 0x71, 0x14, 0x29, 0xcc, 0xd1, 0x45, 0xb1, 0x01, 0x25, 0xe6, 0x91, 0x35,
	0x02, 0xe9, 0x7c, 0x93, 0xee, 0xa6, 0x21, 0x79, 0xb6, 0x3c, 0x58, 0x94, 0xd8, 0x8d, 0x8e, 0xe7,
	0x16, 0x14, 0x3e, 0xf7, 0x5d, 0xef, 0x99, 0x7f, 0x8e, 0x3d, 0x34, 0x0f, 0xef, 0xd0, 0xe8, 0x1f,
	0xc1, 0x8a, 0x3f, 0xa0, 0x05, 0x98, 0xc4, 0x51, 0xb3, 0xcd, 0x8f, 0xea, 0x84, 0x2d, 0x9e, 0x2a,
	0xff, 0x9a, 0x50, 0x88, 0x84, 0xed, 0x51, 0x74, 0x91, 0xa0, 0x03, 0x98, 0xe1, 0xc5, 0x5a, 0x7c,
	0x48, 0xc8, 0x90, 0xfb, 0x66, 0xc6, 0x78, 0x84, 0xc7, 0x8f, 0xf7, 0xf0, 0xf0, 0x1e, 0x05, 0x01,
	0xf6, 0xea, 0xc3, 0xc3, 0xe3, 0x07, 0x78, 0x48, 0x78, 0xfb, 0x50, 0x64, 0xf5, 0x7d, 0x48, 0x70,
	0x55, 0x28, 0x46, 0xeb, 0x1b, 0x7f, 0x8d, 0x99, 0xeb, 0xde, 0x1c, 0x3b, 0xad, 0x80, 0x5e, 0x98,
	0xcb, 0x7a, 0x0c, 0x82, 0x7e, 0x31, 0xe0, 0x3d, 0x85, 0xae, 0x47, 0x1b, 0x2a, 0x63, 0xfd, 0x37,
	0x08, 0xf3, 0xe3, 0xdc, 0x76, 0x62, 0xf3, 0xff, 0x6c, 0xc0, 0x82, 0x5c, 0xa3, 0xa3, 0x87, 0x2a,
	0x4c, 0xed, 0x87, 0x01, 0x73, 0x23, 0xaf, 0x99, 0x60, 0xf2, 0x83, 0x01, 0xd7, 0xa5, 0x8a, 0x1c,
	0x3d, 0xd0, 0x22, 0x2a, 0x14, 0xbe, 0xf9, 0x30, 0xa7, 0x95, 0xa0, 0x11, 0xad, 0x8e, 0x42, 0xf3,
	0xaa, 0x57, 0x47, 0x2f, 0xe3, 0xd5, 0xab, 0x93, 0x25, 0xae, 0x23, 0x32, 0x0a, 0xf9, 0xaa, 0x26,
	0xa3, 0x57, 0xcd, 0x6a, 0x32, 0x59, 0x3a, 0xf9, 0x0f, 0x03, 0x4c, 0xb5, 0x8c, 0x44, 0x5b, 0xfa,
	0x2d, 0xa8, 0x51, 0x46, 0xe6, 0x27, 0x83, 0x98, 0x0a, 0x56, 0xaf, 0x0d, 0x58, 0x54, 0x6a, 0x41,
	0xb4, 0xa9, 0xdd, 0x04, 0x3a, 0x4e, 0x5b, 0x03, 0x58, 0x76, 0x24, 0x4a, 0x2d, 0xc3, 0xd4, 0x89,
	0xca, 0x94, 0x90, 0xea, 0x44, 0xf5, 0xa1, 0xfa, 0xfe, 0x32, 0xe0, 0x86, 0x56, 0xf8, 0xa0, 0x4f,
	0x55, 0xe8, 0xfd, 0x48, 0x38, 0xf3, 0xb3, 0x01, 0xad, 0x3b, 0xb6, 0xba, 0x42, 0x97, 0x64, 0x55,
	0x45, 0x55, 0xf3, 0x98, 0x55, 0x15, 0xd5, 0x4d, 0x62, 0x52, 0x15, 0xd3, 0x5c, 0xf4, 0x65, 0x45,
	0x49, 0x65, 0x23, 0xaf, 0x99, 0x60, 0xe2, 0x42, 0x49, 0x25, 0x50, 0xe4, 0xd7, 0xcf, 0x66, 0x2e,
	0x47, 0xf2, 0xca, 0x97, 0x63, 0x05, 0xf4, 0x3a, 0x26, 0xab, 0xf2, 0xa9, 0xe3, 0xbe, 0xac, 0x7c,
	0x39, 0xc8, 0xe8, 0xb5, 0x44, 0x56, 0xe5, 0x53, 0x93, 0xf9, 0x0e, 0xe6, 0x24, 0xed, 0x3a, 0xaa,
	0xa8, 0xf0, 0xd4, 0xaa, 0xc0, 0xbc, 0x9f, 0xcb, 0xa6, 0xdb, 0x7f, 0x4f, 0xa3, 0xad, 0xf7, 0x2f,
	0xef, 0xf4, 0xf5, 0xfe, 0x55, 0x9d, 0xbc, 0xf0, 0xbf, 0xef, 0xd0, 0xda, 0x99, 0xeb, 0x9d, 0x8e,
	0xdd, 0xff, 0x4b, 0x98, 0x4d, 0xb5, 0xef, 0xe8, 0xae, 0x16, 0x49, 0xa2, 0x10, 0xcc, 0x7b, 0x39,
	0x2c, 0x84, 0xe7, 0x27, 0x70, 0xd5, 0x16, 0xfd, 0x3d, 0x6f, 0xe6, 0x57, 0x55, 0x18, 0x49, 0xbf,
	0x6f, 0xca, 0x8e, 0x25, 0xb2, 0x01, 0xd8, 0x01, 0xec, 0x1b, 0x25, 0x7b, 0x0a, 0xda, 0x81, 0x22,
	0xdf, 0xb9, 0x6f, 0x46, 0x6d, 0x07, 0x8a, 0x87, 0x61, 0xdb, 0xe3, 0x28, 0x64, 0x60, 0x98, 0xe7,
	0x50, 0xa8, 0xfa, 0x5e, 0xc3, 0x3d, 0x6d, 0x87, 0x18, 0xdd, 0xec, 0x9e, 0x21, 0x7e, 0x49, 0x4d,
	0xc6, 0xe3, 0x15, 0xf9, 0x28, 0x6b, 0x9a, 0x58, 0x86, 0x06, 0x5c, 0x7d, 0x82, 0xe9, 0x21, 0x1b,
	0xde, 0xf3, 0x1a, 0x3e, 0xba, 0x25, 0x35, 0xec, 0x9a, 0x13, 0xfb, 0xb8, 0xdd, 0xcf, 0x54, 0xee,
	0xe7, 0x71, 0xf1, 0x79, 0x21, 0x89, 0xf7, 0xf0, 0xad, 0x43, 0xe3, 0x64, 0x92, 0xfd, 0x92, 0x7b,
	0xff, 0xbf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x19, 0x54, 0x7e, 0x5e, 0x61, 0x1e, 0x00, 0x00,
}
