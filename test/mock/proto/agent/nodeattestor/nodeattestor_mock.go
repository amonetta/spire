// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/spiffe/spire/proto/agent/nodeattestor (interfaces: NodeAttestor,NodeAttestorPlugin,NodeAttestor_FetchAttestationData_Stream)

// Package mock_nodeattestor is a generated GoMock package.
package mock_nodeattestor

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	nodeattestor "github.com/spiffe/spire/proto/agent/nodeattestor"
	plugin "github.com/spiffe/spire/proto/common/plugin"
	reflect "reflect"
)

// MockNodeAttestor is a mock of NodeAttestor interface
type MockNodeAttestor struct {
	ctrl     *gomock.Controller
	recorder *MockNodeAttestorMockRecorder
}

// MockNodeAttestorMockRecorder is the mock recorder for MockNodeAttestor
type MockNodeAttestorMockRecorder struct {
	mock *MockNodeAttestor
}

// NewMockNodeAttestor creates a new mock instance
func NewMockNodeAttestor(ctrl *gomock.Controller) *MockNodeAttestor {
	mock := &MockNodeAttestor{ctrl: ctrl}
	mock.recorder = &MockNodeAttestorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockNodeAttestor) EXPECT() *MockNodeAttestorMockRecorder {
	return m.recorder
}

// FetchAttestationData mocks base method
func (m *MockNodeAttestor) FetchAttestationData(arg0 context.Context) (nodeattestor.FetchAttestationData_Stream, error) {
	ret := m.ctrl.Call(m, "FetchAttestationData", arg0)
	ret0, _ := ret[0].(nodeattestor.FetchAttestationData_Stream)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchAttestationData indicates an expected call of FetchAttestationData
func (mr *MockNodeAttestorMockRecorder) FetchAttestationData(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchAttestationData", reflect.TypeOf((*MockNodeAttestor)(nil).FetchAttestationData), arg0)
}

// MockNodeAttestorPlugin is a mock of NodeAttestorPlugin interface
type MockNodeAttestorPlugin struct {
	ctrl     *gomock.Controller
	recorder *MockNodeAttestorPluginMockRecorder
}

// MockNodeAttestorPluginMockRecorder is the mock recorder for MockNodeAttestorPlugin
type MockNodeAttestorPluginMockRecorder struct {
	mock *MockNodeAttestorPlugin
}

// NewMockNodeAttestorPlugin creates a new mock instance
func NewMockNodeAttestorPlugin(ctrl *gomock.Controller) *MockNodeAttestorPlugin {
	mock := &MockNodeAttestorPlugin{ctrl: ctrl}
	mock.recorder = &MockNodeAttestorPluginMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockNodeAttestorPlugin) EXPECT() *MockNodeAttestorPluginMockRecorder {
	return m.recorder
}

// Configure mocks base method
func (m *MockNodeAttestorPlugin) Configure(arg0 context.Context, arg1 *plugin.ConfigureRequest) (*plugin.ConfigureResponse, error) {
	ret := m.ctrl.Call(m, "Configure", arg0, arg1)
	ret0, _ := ret[0].(*plugin.ConfigureResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Configure indicates an expected call of Configure
func (mr *MockNodeAttestorPluginMockRecorder) Configure(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Configure", reflect.TypeOf((*MockNodeAttestorPlugin)(nil).Configure), arg0, arg1)
}

// FetchAttestationData mocks base method
func (m *MockNodeAttestorPlugin) FetchAttestationData(arg0 nodeattestor.FetchAttestationData_PluginStream) error {
	ret := m.ctrl.Call(m, "FetchAttestationData", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// FetchAttestationData indicates an expected call of FetchAttestationData
func (mr *MockNodeAttestorPluginMockRecorder) FetchAttestationData(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchAttestationData", reflect.TypeOf((*MockNodeAttestorPlugin)(nil).FetchAttestationData), arg0)
}

// GetPluginInfo mocks base method
func (m *MockNodeAttestorPlugin) GetPluginInfo(arg0 context.Context, arg1 *plugin.GetPluginInfoRequest) (*plugin.GetPluginInfoResponse, error) {
	ret := m.ctrl.Call(m, "GetPluginInfo", arg0, arg1)
	ret0, _ := ret[0].(*plugin.GetPluginInfoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPluginInfo indicates an expected call of GetPluginInfo
func (mr *MockNodeAttestorPluginMockRecorder) GetPluginInfo(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPluginInfo", reflect.TypeOf((*MockNodeAttestorPlugin)(nil).GetPluginInfo), arg0, arg1)
}

// MockNodeAttestor_FetchAttestationData_Stream is a mock of NodeAttestor_FetchAttestationData_Stream interface
type MockNodeAttestor_FetchAttestationData_Stream struct {
	ctrl     *gomock.Controller
	recorder *MockNodeAttestor_FetchAttestationData_StreamMockRecorder
}

// MockNodeAttestor_FetchAttestationData_StreamMockRecorder is the mock recorder for MockNodeAttestor_FetchAttestationData_Stream
type MockNodeAttestor_FetchAttestationData_StreamMockRecorder struct {
	mock *MockNodeAttestor_FetchAttestationData_Stream
}

// NewMockNodeAttestor_FetchAttestationData_Stream creates a new mock instance
func NewMockNodeAttestor_FetchAttestationData_Stream(ctrl *gomock.Controller) *MockNodeAttestor_FetchAttestationData_Stream {
	mock := &MockNodeAttestor_FetchAttestationData_Stream{ctrl: ctrl}
	mock.recorder = &MockNodeAttestor_FetchAttestationData_StreamMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockNodeAttestor_FetchAttestationData_Stream) EXPECT() *MockNodeAttestor_FetchAttestationData_StreamMockRecorder {
	return m.recorder
}

// CloseSend mocks base method
func (m *MockNodeAttestor_FetchAttestationData_Stream) CloseSend() error {
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend
func (mr *MockNodeAttestor_FetchAttestationData_StreamMockRecorder) CloseSend() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockNodeAttestor_FetchAttestationData_Stream)(nil).CloseSend))
}

// Context mocks base method
func (m *MockNodeAttestor_FetchAttestationData_Stream) Context() context.Context {
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context
func (mr *MockNodeAttestor_FetchAttestationData_StreamMockRecorder) Context() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockNodeAttestor_FetchAttestationData_Stream)(nil).Context))
}

// Recv mocks base method
func (m *MockNodeAttestor_FetchAttestationData_Stream) Recv() (*nodeattestor.FetchAttestationDataResponse, error) {
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*nodeattestor.FetchAttestationDataResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv
func (mr *MockNodeAttestor_FetchAttestationData_StreamMockRecorder) Recv() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockNodeAttestor_FetchAttestationData_Stream)(nil).Recv))
}

// Send mocks base method
func (m *MockNodeAttestor_FetchAttestationData_Stream) Send(arg0 *nodeattestor.FetchAttestationDataRequest) error {
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send
func (mr *MockNodeAttestor_FetchAttestationData_StreamMockRecorder) Send(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockNodeAttestor_FetchAttestationData_Stream)(nil).Send), arg0)
}
